
#Область ОписаниеПеременных

&НаСервере
Перем ВсеВидыПоиска; //см. ВсеВидыПоиска

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолноеИмяМетаданных = Параметры.ПолноеИмяМетаданных;
	Заголовок = СтрШаблон("Поиск: %1", ПолноеИмяМетаданных);
	ТочноеСовпадение = Истина;
	ЗаполнитьДоступныеВидыПоиска();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеСсылки

&НаКлиенте
Процедура НайденныеСсылкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Новый ОписаниеОповещения(), Элементы.НайденныеСсылки.ТекущиеДанные.Ссылка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда_НайтиСсылки(Команда)
	
	НайтиСсылкиОбъектаМетаданных();

КонецПроцедуры

#КонецОбласти



#Область СлужебныеПроцедурыИФункции

#Область ВидыПоиска

// Все виды поиска.
// 
// Возвращаемое значение:
//  Структура:
// * УникальныйИдентификатор - Строка - Поиск по УИД
// * БитаяСсылка - Строка - Поиск по представлению битой ссылки
// * НавигационнаяСсылка - Строка - Поиск по навигационной ссылки
// * Код - Строка - Поиск по коду
// * Номер - Строка - Поиск по номеру
// * Наименование - Строка - Поиск по наименованию
&НаКлиентеНаСервереБезКонтекста
Функция ВсеВидыПоиска()
	
   	Результат = Новый Структура;
   	Результат.Вставить("УникальныйИдентификатор", "Уникальный идентификатор");
	Результат.Вставить("БитаяСсылка", "Битая ссылка");
	Результат.Вставить("СсылкаСУБД", "Ссылка СУБД");
	Результат.Вставить("НавигационнаяСсылка", "Навигационная ссылка");
	Результат.Вставить("Код", "Код");
	Результат.Вставить("Номер", "Номер");
	Результат.Вставить("Наименование", "Наименование");
	
	Возврат Результат;
	
КонецФункции

// Найти ссылки объекта метаданных.
&НаСервере
Процедура НайтиСсылкиОбъектаМетаданных()
	
	НайденныеСсылки.Очистить();
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = ОбъектМетаданных();
	
	НайтиСсылкиПоУникальномуИдентификатору(ОбъектМетаданных);
	НайтиСсылкиПоБитомуПредставлению(ОбъектМетаданных);
	НайтиСсылкиПоНавигационнойСсылке(ОбъектМетаданных);
	НайтиСсылкиПоНаименованию(ОбъектМетаданных);
	НайтиСсылкиПоСсылкеСУБД(ОбъектМетаданных);
	НайтиСсылкиПоНомеру(ОбъектМетаданных);
	НайтиСсылкиПоКоду(ОбъектМетаданных);
	
КонецПроцедуры

// Найти ссылки по уникальному идентификатору.
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоУникальномуИдентификатору(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.УникальныйИдентификатор;
	Если НЕ ВидПоискаВыбран(ВидПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСсылка = СсылкаПоИдентификатору(ОбъектМетаданных, СтрокаПоиска);
	Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		ДобавитьНайденнуюСсылку(НайденнаяСсылка, ВидПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Найти ссылки по ссылке СУБД.
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоСсылкеСУБД(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.СсылкаСУБД;
	Если НЕ ВидПоискаВыбран(ВидПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаИдентификатораИзСтрокиСУБД(СтрокаПоиска);
	
	НайденнаяСсылка = СсылкаПоИдентификатору(ОбъектМетаданных, Идентификатор);
	Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		ДобавитьНайденнуюСсылку(НайденнаяСсылка, ВидПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Найти ссылки по навигационной ссылке
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоНавигационнойСсылке(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.НавигационнаяСсылка;
	Если НЕ ВидПоискаВыбран(ВидПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ВРег(СокрЛП(СтрокаПоиска));
	ЛеваяЧасть = ВРег(СтрШаблон("e1cib/data/%1?ref=", ПолноеИмяМетаданных));
	Координата = СтрНайти(Строка, ЛеваяЧасть);
	Если Координата = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаГУИДа = ДлинаИдентификатораСУБД();
	Идентификатор = Сред(Строка, Координата + СтрДлина(ЛеваяЧасть), ДлинаГУИДа);
	Идентификатор = СтрокаИдентификатораИзСтрокиСУБД(Идентификатор);
	НайденнаяСсылка = СсылкаПоИдентификатору(ОбъектМетаданных, Идентификатор);
	Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		ДобавитьНайденнуюСсылку(НайденнаяСсылка, ВидПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Найти ссылки по представлению битой ссылки
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоБитомуПредставлению(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.БитаяСсылка;
	Если НЕ ВидПоискаВыбран(ВидПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Строка = СокрЛП(СтрокаПоиска);
	Если НЕ СтрЗаканчиваетсяНа(Строка, ")") Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаГУИДа = ДлинаИдентификатораСУБД();
	ДлинаСтроки = СтрДлина(Строка);
	Идентификатор = Сред(Строка, ДлинаСтроки - ДлинаГУИДа, ДлинаГУИДа);
	Идентификатор = СтрокаИдентификатораИзСтрокиСУБД(Идентификатор);
	НайденнаяСсылка = СсылкаПоИдентификатору(ОбъектМетаданных, Идентификатор);
	Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		ДобавитьНайденнуюСсылку(НайденнаяСсылка, ВидПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Найти ссылки по коду
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоКоду(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.Код;
	НайтиСсылкиПоРеквизиту(ОбъектМетаданных, "Код", ВидПоиска);
	
КонецПроцедуры

// Найти ссылки по номеру
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоНомеру(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.Номер;
	НайтиСсылкиПоРеквизиту(ОбъектМетаданных, "Номер", ВидПоиска);
	
КонецПроцедуры

// Найти ссылки по наименованию
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура НайтиСсылкиПоНаименованию(ОбъектМетаданных)
	
	ВидПоиска = ВсеВидыПоиска.Наименование;
	НайтиСсылкиПоРеквизиту(ОбъектМетаданных, "Наименование", ВидПоиска);
	
КонецПроцедуры

// Найти ссылки по коду
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
//  ИмяРеквизита - Строка
//  ВидПоиска - Строка - Значение из см. ВсеВидыПоиска
&НаСервере
Процедура НайтиСсылкиПоРеквизиту(ОбъектМетаданных, ИмяРеквизита, ВидПоиска)
	
	Если НЕ ВидПоискаВыбран(ВидПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТочноеСовпадение Тогда
		ТекстУсловия = СтрШаблон("%1 = &Значение", ИмяРеквизита);
		ЗначениеУсловия = СтрокаПоиска;
	Иначе
		ТекстУсловия = СтрШаблон("%1 ПОДОБНО &Значение", ИмяРеквизита);
		ЗначениеУсловия = "%" + СтрокаПоиска + "%";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Значение", ЗначениеУсловия);
	Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ Ссылка, Представление ИЗ %1 ГДЕ %2", 
		ПолноеИмяМетаданных, ТекстУсловия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьНайденнуюСсылку(Выборка[0], ВидПоиска, Выборка[1]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Добавить найденную ссылку.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
//  ВидПоиска - Строка - Значение из см. ВсеВидыПоиска
//  Представление - Строка
&НаСервере
Процедура ДобавитьНайденнуюСсылку(Ссылка, ВидПоиска, Знач Представление = "")
	
	//Есть баг платформы, что тип ЛюбаяСсылка в расширении не понимает типы другого расширения
	//Приходится делать поле Ссылка типом "Произвольный", а выводить представление
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = Строка(Ссылка);
	КонецЕсли;
	
	НоваяСтрока = НайденныеСсылки.Добавить();
	НоваяСтрока.Ссылка = Ссылка;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ВидПоиска = ВидПоиска;
	
КонецПроцедуры


#КонецОбласти

#Область ЗаполнитьДоступныеВидыПоиска

&НаСервере
Процедура ЗаполнитьДоступныеВидыПоиска()
	
	ОбъектМетаданных = ОбъектМетаданных();
	
	//Доступные всегда
	ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.БитаяСсылка);
	ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.СсылкаСУБД);
	ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.УникальныйИдентификатор);
	ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.НавигационнаяСсылка);
	
	//Доступность зависит от объекта метаданных
	ЗаполнитьДоступныйВидПоиска_Код(ОбъектМетаданных);
	ЗаполнитьДоступныйВидПоиска_Номер(ОбъектМетаданных);
	ЗаполнитьДоступныйВидПоиска_Наименование(ОбъектМетаданных);
	
КонецПроцедуры

// Заполнить доступный вид поиска (код).
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура ЗаполнитьДоступныйВидПоиска_Код(ОбъектМетаданных)
	
	Если ЕстьСтандартныйРеквизитОбъектаМетаданных(ОбъектМетаданных, "Код") Тогда
		
		ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.Код);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить доступный вид поиска (Номер).
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура ЗаполнитьДоступныйВидПоиска_Номер(ОбъектМетаданных)
	
	Если ЕстьСтандартныйРеквизитОбъектаМетаданных(ОбъектМетаданных, "Номер") Тогда
		
		ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.Номер);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить доступный вид поиска (Наименование).
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
&НаСервере
Процедура ЗаполнитьДоступныйВидПоиска_Наименование(ОбъектМетаданных)
	
	Если ЕстьСтандартныйРеквизитОбъектаМетаданных(ОбъектМетаданных, "Наименование") Тогда
		
		ДобавитьДоступныйВидПоиска(ВсеВидыПоиска.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавить доступный вид поиска.
// 
// Параметры:
//  ВидПоиска - Строка - Значение из см. ВсеВидыПоиска
&НаСервере
Процедура ДобавитьДоступныйВидПоиска(ВидПоиска)
	
	ВидыПоиска.Добавить(ВидПоиска, ВидПоиска, Истина);
	
КонецПроцедуры

// Вид поиска выбран.
// 
// Параметры:
//  ВидПоиска - Строка
// 
// Возвращаемое значение:
//  Булево
&НаСервере
Функция ВидПоискаВыбран(ВидПоиска)
	
	ЭлементСписка = ВидыПоиска.НайтиПоЗначению(ВидПоиска);
	Возврат ЭлементСписка <> Неопределено И ЭлементСписка.Пометка; 
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

// Ссылка по идентификатору.
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
//  Идентификатор - Строка
// 
// Возвращаемое значение:
//  Неопределено, ЛюбаяСсылка -
&НаСервере
Функция СсылкаПоИдентификатору(ОбъектМетаданных, Знач Идентификатор)
	
	Попытка
		Идентификатор   = Новый УникальныйИдентификатор(Идентификатор);
		МенеджерОбъекта = МенеджерОбъектаМетаданных();
		Возврат МенеджерОбъекта.ПолучитьСсылку(Идентификатор);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Есть ли стандартный реквизит у объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Булево
&НаСервере
Функция ЕстьСтандартныйРеквизитОбъектаМетаданных(ОбъектМетаданных, ИмяРеквизита)
	
	Реквизит = СтандартныйРеквизитОбъектаМетаданных(ОбъектМетаданных, ИмяРеквизита);
	Возврат Реквизит <> Неопределено;
	
КонецФункции

// Стандартный реквизит объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - см. ОбъектМетаданных
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Неопределено, ОбъектМетаданныхРеквизит -
&НаСервере
Функция СтандартныйРеквизитОбъектаМетаданных(ОбъектМетаданных, ИмяРеквизита)
	
	ВременнаяСтруктура = Новый Структура(ИмяРеквизита);
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, ОбъектМетаданных.СтандартныеРеквизиты);
	Возврат ВременнаяСтруктура[ИмяРеквизита];
	
КонецФункции

// Объект метаданных.
// 
// Возвращаемое значение:
//  ОбъектМетаданныхСправочник, ОбъектМетаданныхБизнесПроцесс, ОбъектМетаданныхДокумент, ОбъектМетаданныхЗадача, ОбъектМетаданныхЗадача -
&НаСервере
Функция ОбъектМетаданных()
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	Если ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не найден объект метаданных %1", ПолноеИмяМетаданных);
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

// Менеджер объекта метаданных.
// 
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ПланВидовРасчетаМенеджер, ПланВидовХарактеристикМенеджер, БизнесПроцессМенеджер, ЗадачаМенеджер, ПланСчетовМенеджер -
&НаСервере
Функция МенеджерОбъектаМетаданных()
	
	Возврат Новый (СтрЗаменить(ПолноеИмяМетаданных, ".", "Менеджер."));
	
КонецФункции

// Строка идентификатора из строки СУБД.
// 
// Параметры:
//  Строка - Строка
// 
// Возвращаемое значение:
//  Строка
&НаСервере
Функция СтрокаИдентификатораИзСтрокиСУБД(Строка)
	
	Идентификатор = СтрЗаменить(НРег(СокрЛП(Строка)), "0x", "");
	Идентификатор = СтрШаблон(
		"%1-%2-%3-%4-%5",
		Прав(Идентификатор, 8),
		Сред(Идентификатор, 21, 4),
		Сред(Идентификатор, 17, 4),
		Лев(Идентификатор, 4),
		Сред(Идентификатор, 5, 12));
		
	Возврат Идентификатор;
	
КонецФункции

// Длина идентификатора СУБД.
// 
// Возвращаемое значение:
//  Число
&НаСервере
Функция ДлинаИдентификатораСУБД()
	
	Возврат 32;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//@skip-check module-structure-top-region - баг ЕДТ. Сначала требует область, потом на неё ругается
#Область Инициализация 

ВсеВидыПоиска = ВсеВидыПоиска();

#КонецОбласти
