// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияМодуляПриложения

// Событие модуля приложения "ПриНачалеРаботыСистемы"
// Производим инициализацию параметров поиска
Процедура ПриНачалеРаботыСистемы() Экспорт

	ПараметрыПоиска = ПараметрыРасширенногоГлобальногоПоиска();

	Если ЗначениеЗаполнено(ПараметрыПоиска.Описание) Тогда
		ГлобальныйПоиск.УстановитьОписание(ПараметрыПоиска.Описание);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПоиска.ПодсказкаВвода) Тогда
		ГлобальныйПоиск.УстановитьПодсказкуВвода(ПараметрыПоиска.ПодсказкаВвода);
	КонецЕсли;

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеСобытияПриНачалеРаботыСистемы();

КонецПроцедуры

// Событие модуля приложения "ПриГлобальномПоиске"
// Анализируем введенную строку на наличие команд расширенного поиска
// 
// Параметры:
//  ИзначальнаяСтрокаПоиска - Строка - Строка, введенная пользователем или скриптом в поле глобального поиска
//  ПланПоиска - ПланГлобальногоПоиска - Текущий план выполнения глобального поиска.
Процедура ПриГлобальномПоиске(ИзначальнаяСтрокаПоиска, ПланПоиска) Экспорт

	СтрокаПоиска = ВРег(СокрЛП(ИзначальнаяСтрокаПоиска));

	ПараметрыПоиска = ПараметрыРасширенногоГлобальногоПоиска();
	Для Каждого КлючИЗначение Из ПараметрыПоиска.Команды Цикл

		Если Не СтрНачинаетсяС(СтрокаПоиска, КлючИЗначение.Ключ) Или Не КлючИЗначение.Значение.Использование Тогда
			Продолжить;
		КонецЕсли;

		ПланПоиска.Очистить();

		СтрокаПоиска = Сред(СтрокаПоиска, СтрДлина(КлючИЗначение.Ключ) + 1);

		ТекущаяКоманда = КлючИЗначение.Значение; //см. НоваяКомандаРасширенногоПоиска
		ЧастиСтрокиПоиска = СтрРазделить(СтрокаПоиска, ТекущаяКоманда.Разделитель, Истина);
		Для Каждого ЧастьСтроки Из ЧастиСтрокиПоиска Цикл

			ПодчиненнаяКоманда = ТекущаяКоманда.Команды.Получить(ЧастьСтроки); //см. НоваяКомандаРасширенногоПоиска

			Если ПодчиненнаяКоманда = Неопределено Или Не ПодчиненнаяКоманда.Использование Тогда
				Прервать;
			Иначе
				ТекущаяКоманда = ПодчиненнаяКоманда;
			КонецЕсли;

		КонецЦикла;

		Для Каждого ЭлементПлана Из ТекущаяКоманда.ПланПоиска Цикл

			ПланПоиска.Добавить(ЭлементПлана.ИмяПроцедуры, ЭлементПлана.Модуль, ЭлементПлана.НаСервере,
				ЭлементПлана.Фоновый, ЭлементПлана.Порядок, ЭлементПлана.ДополнительныеПараметры);

		КонецЦикла;

		Если ЗначениеЗаполнено(ТекущаяКоманда.Команды) Тогда
			ПланПоиска.Добавить("ГлобальныйПоискВывестиПодчиненныеКоманды", "РГП_ГлобальныйПоискКлиент", Ложь, Ложь,
				ПланПоиска.Количество() + 1, ТекущаяКоманда);
		КонецЕсли;

	КонецЦикла;

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеСобытияПриГлобальномПоиске(ИзначальнаяСтрокаПоиска,
		ПланПоиска);

КонецПроцедуры

// Событие модуля приложения "ПриВыбореРезультатаГлобальногоПоиска"
// Когда пользователь выбрал одну из команд расширенного глобального поиска, мы программно вводим её полный ключ в поле поиска
// 
// Параметры:
//  ЭлементРезультата - ЭлементРезультатаГлобальногоПоиска:
//  * Значение - см. НоваяКомандаРасширенногоПоиска
//             - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  СтандартнаяОбработка - Булево
Процедура ПриВыбореРезультатаГлобальногоПоиска(Знач ЭлементРезультата, СтандартнаяОбработка) Экспорт
	
	Если ЭлементРезультата.ВидПоиска = РГП_ГлобальныйПоискКлиентСервер.КлючВидаРасширенногоГлобальногоПоиска() Тогда
		ОбработатьДанныеРезультатаГлобальногоПоиска(ЭлементРезультата.Значение, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// При выборе действия результата глобального поиска.
// 
// Параметры:
//  ЭлементРезультата - ЭлементРезультатаГлобальногоПоиска
//  Действие - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
Процедура ПриВыбореДействияРезультатаГлобальногоПоиска(ЭлементРезультата, Действие) Экспорт
	
	Если ЭлементРезультата.ВидПоиска = РГП_ГлобальныйПоискКлиентСервер.КлючВидаРасширенногоГлобальногоПоиска() Тогда
		ОбработатьДанныеРезультатаГлобальногоПоиска(Действие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиГлобальногоПоиска

// Метод плана глобального поиска для вывода подчиненных команд пользователю
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ОписаниеКоманды - см. РГП_ГлобальныйПоискКлиент.НоваяКомандаРасширенногоПоиска
Процедура ГлобальныйПоискВывестиПодчиненныеКоманды(СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды) Экспорт

	ПараметрыВыполнения = ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска(ОписаниеКоманды);
	ДанныеПоиска = РГП_ГлобальныйПоискКлиентСервер.ДанныеПоискаКомандыГлобальногоПоиска(ПараметрыВыполнения, СтрокаПоиска);

	Для Каждого ПодчиненнаяКоманда Из ОписаниеКоманды.ПорядокКоманд Цикл //см. НоваяКомандаРасширенногоПоиска

		Если Не ПодчиненнаяКоманда.Использование Или Не ПодчиненнаяКоманда.ОтображатьВМеню Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРезультата  = ДанныеРезультатаГлобальногоПоискаНаОсновеОписанияКоманды(ПодчиненнаяКоманда, ДанныеПоиска);
		ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(ДанныеРезультата, 
			ПодчиненнаяКоманда.Представление, ПодчиненнаяКоманда.Картинка, ПодчиненнаяКоманда.Описание);
		
		РезультатыПоиска.Добавить(ЭлементРезультата);

	КонецЦикла;

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеВыводаПодчиненныхКомандГлобальногоПоиска(
		СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды);

КонецПроцедуры

// Метод плана глобального для поиска по открытым окнам
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ОписаниеКоманды - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска
Процедура ГлобальныйПоискПоОткрытымОкнам(Знач СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды) Экспорт

	ОбщиеПараметры = ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымОкнам(СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды);
	
	ГлобальныйПоискПоОткрытымОкнам_ДобавитьСтандартныеРезультаты(ОбщиеПараметры);	

	ГлобальныйПоискПоОткрытымОкнам_ВывестиОткрытыеФормы(ОбщиеПараметры);

КонецПроцедуры

// Метод плана глобального для поиска по открытым окнам
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ОписаниеКоманды - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска
Процедура ГлобальныйПоискПоЭлементамФормы(Знач СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды) Экспорт

	ДанныеПоиска = РГП_ГлобальныйПоискКлиентСервер.ДанныеПоискаКомандыГлобальногоПоиска(ОписаниеКоманды, СтрокаПоиска);
	Если НЕ ЗначениеЗаполнено(ДанныеПоиска.ПараметрыКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	РГП_ГлобальныйПоискКлиентСервер.ДобавитьЭлементРезультатаКомандаВводаСтрокиНаОсновеДанныхПоиска(РезультатыПоиска, ДанныеПоиска);
	
	Если ПустаяСтрока(ДанныеПоиска.СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ФормаПоУникальномуИдентификатору(ДанныеПоиска.ПараметрыКоманды[0]);
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = ДанныеПоиска.СтрокаПоиска;
	СловаПоиска  = ДанныеПоиска.СловаПоиска;
	ПриоритетыЭлементов = Новый СписокЗначений; //СписокЗначений из Число
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		
		ПолучаемыеСвойства = Новый Структура("Видимость, Имя, Заголовок", Ложь, "", "");
		
		Попытка
			ЗаполнитьЗначенияСвойств(ПолучаемыеСвойства, ЭлементФормы);
		Исключение
			Продолжить; //TODO: На декорациях платформа падает. Фиг с ними
		КонецПопытки;
		
		Если НЕ ПолучаемыеСвойства.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		ПриоритетЭлемента = 0;
		ИмяЭлементаВрег   = ВРег(ПолучаемыеСвойства.Имя);
		ЗаголовокВрег     = ВРег(ПолучаемыеСвойства.Заголовок);
		
		Если ИмяЭлементаВрег = СтрокаПоиска ИЛИ ЗаголовокВрег = СтрокаПоиска Тогда
			ПриоритетЭлемента = ДанныеПоиска.МаксимальныйПриоритет;
		ИначеЕсли СтрНачинаетсяС(ИмяЭлементаВрег, СтрокаПоиска) ИЛИ СтрНачинаетсяС(ЗаголовокВрег, СтрокаПоиска) Тогда
			ПриоритетЭлемента = ДанныеПоиска.МаксимальныйПриоритет - 1;
		Иначе
			Для Каждого СловоПоиска Из СловаПоиска Цикл				
				ПриоритетЭлемента = ПриоритетЭлемента + СтрЧислоВхождений(ИмяЭлементаВрег, СловоПоиска);
				ПриоритетЭлемента = ПриоритетЭлемента + СтрЧислоВхождений(ЗаголовокВрег, СловоПоиска);
			КонецЦикла;
		КонецЕсли;
			
		Если ПриоритетЭлемента > 0 Тогда
			ПриоритетыЭлементов.Добавить(ПриоритетЭлемента, ИмяЭлементаВрег);
		КонецЕсли;
		
	КонецЦикла;
	
	ПриоритетыЭлементов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	ДополнительныеПараметрыДействий = Новый Структура;
	ДополнительныеПараметрыДействий.Вставить("Форма", Форма);
	ДополнительныеПараметрыДействий.Вставить("Элемент", Неопределено);
	КартинкаФормы     = БиблиотекаКартинок.ПолеВводаОткрыть;
	ОписаниеВыделения = Новый ОписаниеОповещения("ВыделитьЭлементФормы", ЭтотОбъект);
	ОписаниеАктивация = Новый ОписаниеОповещения("АктивироватьЭлементФормы", ЭтотОбъект);
	
	Для Каждого ЭлементСписка Из ПриоритетыЭлементов Цикл
		
		Если РезультатыПоиска.Количество() > ДанныеПоиска.ЛимитСтрокРезультата Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементФормы  = Форма.Элементы.Найти(ЭлементСписка.Представление);
		Представление = ?(ПустаяСтрока(ЭлементФормы.Заголовок), ЭлементФормы.Имя, ЭлементФормы.Заголовок);
		Представление = СтрШаблон("%1: %2", ТипЗнч(ЭлементФормы), Представление);
		
		ДополнительныеПараметрыДействий.Элемент = ЭлементФормы;
		
		ДанныеРезультатаАктивация  = ДанныеРезультатаНаОсновеДанныхВыполнения(ДанныеПоиска);
		ДанныеРезультатаАктивация.ОписаниеОповещения = ОписаниеАктивация;
		ДанныеРезультатаАктивация.ДополнительныеПараметры.Вставить("Форма", Форма);
		ДанныеРезультатаАктивация.ДополнительныеПараметры.Вставить("Элемент", ЭлементФормы);
		
		ДанныеРезультатаВыделение = ДанныеРезультатаНаОсновеДанныхВыполнения(ДанныеПоиска);
		ДанныеРезультатаВыделение.ОписаниеОповещения = ОписаниеВыделения;
		ДанныеРезультатаВыделение.ДополнительныеПараметры.Вставить("Форма", Форма);
		ДанныеРезультатаВыделение.ДополнительныеПараметры.Вставить("Элемент", ЭлементФормы);
		
		ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
			ДанныеРезультатаАктивация, Представление, КартинкаФормы);
		
		ЭлементРезультата.Действия.Добавить(ДанныеРезультатаАктивация, "Акивировать", КартинкаФормы);
		ЭлементРезультата.Действия.Добавить(ДанныеРезультатаВыделение, "Выделить", КартинкаФормы);

		РезультатыПоиска.Добавить(ЭлементРезультата);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатаГлобальногоПоиска

// Показать поле ввода строки поиска
// 
// Параметры:
//  ДанныеРезультата - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  ПараметрыДействия - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыДействияВводаСтроки
Процедура ОтобразитьВводСтроки(ДанныеРезультата, ПараметрыДействия) Экспорт
	
	ОписаниеОкончанияВвода = Новый ОписаниеОповещения("ПоместитьСтрокуВКонецПоиска", ЭтотОбъект, ПараметрыДействия);
	ПоказатьВводСтроки(ОписаниеОкончанияВвода, ПараметрыДействия.НачальнаяСтрока, ПараметрыДействия.Представление);
	
КонецПроцедуры

// Поместить введенную строку в конец строки поиска
// 
// Параметры:
//  Строка - Строка, Неопределено - 
//  ПараметрыДействия - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыДействияВводаСтроки
Процедура ПоместитьСтрокуВКонецПоиска(Строка, ПараметрыДействия) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Строка") Тогда
		
		ГлобальныйПоиск.НачатьПоиск(ПараметрыДействия.СтрокаПоиска + Строка);
		
	КонецЕсли;
	
КонецПроцедуры

// Активировать форму.
// 
// Параметры:
//  ДанныеРезультата - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  ДополнительныеПараметры - Произвольный
Процедура АктивироватьФорму(ДанныеРезультата, ДополнительныеПараметры) Экспорт
	
	Форма = Неопределено; //ФормаКлиентскогоПриложения
	Если ДанныеРезультата.ДополнительныеПараметры.Свойство("Форма", Форма) Тогда
		Форма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

// Закрыть форму.
// 
// Параметры:
//  ДанныеРезультата - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  ДополнительныеПараметры - Произвольный
Процедура ЗакрытьФорму(ДанныеРезультата, ДополнительныеПараметры) Экспорт
	
	Форма = Неопределено; //ФормаКлиентскогоПриложения
	Если ДанныеРезультата.ДополнительныеПараметры.Свойство("Форма", Форма) Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Активировать элемент формы
// 
// Параметры:
//  ДанныеРезультата - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  ДополнительныеПараметры - Произвольный
Процедура АктивироватьЭлементФормы(ДанныеРезультата, ДополнительныеПараметры) Экспорт
	
	Форма   = Неопределено; //ФормаКлиентскогоПриложения
	Элемент = Неопределено; //ПолеВвода
	Если ДанныеРезультата.ДополнительныеПараметры.Свойство("Форма", Форма)
		И ДанныеРезультата.ДополнительныеПараметры.Свойство("Элемент", Элемент) Тогда
		
		Форма.ТекущийЭлемент = Элемент; //@skip-check statement-type-change
		
	КонецЕсли;
	
КонецПроцедуры

// Выделить элемент формы
// 
// Параметры:
//  ДанныеРезультата - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  ДополнительныеПараметры - Произвольный
Процедура ВыделитьЭлементФормы(ДанныеРезультата, ДополнительныеПараметры) Экспорт
	
	Форма   = Неопределено; //ФормаКлиентскогоПриложения
	Элемент = Неопределено; //ПолеВвода
	Если ДанныеРезультата.ДополнительныеПараметры.Свойство("Форма", Форма)
		И ДанныеРезультата.ДополнительныеПараметры.Свойство("Элемент", Элемент) Тогда
		
		НовыеСвойства = Новый Структура;
		НовыеСвойства.Вставить("ЦветРамки", WebЦвета.Красный);
		НовыеСвойства.Вставить("ЦветФона" , WebЦвета.СветлоЖелтый);
		
		ЗаполнитьЗначенияСвойств(Элемент, НовыеСвойства);
		
		Форма.ТекущийЭлемент = Элемент; //@skip-check statement-type-change
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыРаботыСРасширеннымПоиском

// Обработать данные результата глобального поиска.
// 
// Параметры:
//  ДанныеРезультата - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
//  СтандартнаяОбработка - Булево
Процедура ОбработатьДанныеРезультатаГлобальногоПоиска(ДанныеРезультата, СтандартнаяОбработка = Истина) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ОписаниеОповещения = ОписаниеОповещения(ДанныеРезультата.ОписаниеОповещения);
	Если ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеРезультата);
	КонецЕсли;
	
	Если ДанныеРезультата.ОткрываемоеЗначение <> Неопределено Тогда
		
		ПоказатьЗначение = Истина;
		Если ТипЗнч(ДанныеРезультата.ОткрываемоеЗначение) = Тип("Строка") Тогда
			
			НавигационнаяСсылка = ДанныеРезультата.ОткрываемоеЗначение; //Строка
			
			Попытка //@skip-check empty-except-statement
				ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
				ПоказатьЗначение = Ложь;
			Исключение
				//Значит это не навигационная ссылка
			КонецПопытки;
			
		КонецЕсли;
		
		Если ПоказатьЗначение Тогда
			ПоказатьЗначение(Неопределено, ДанныеРезультата.ОткрываемоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРезультата.ПутьПерехода) Тогда
		ГлобальныйПоиск.НачатьПоиск(ДанныеРезультата.ПутьПерехода);
	КонецЕсли;

КонецПроцедуры

// Параметры расширенного глобального поиска
// Именять содержимое можно только в переропределяемом событии "ПослеЗаполненияПараметровРасширенногоГлобальногоПоиска"
// 
// Параметры:
//  ИзКэша - Булево - Выбирать ли закэшированную структуру
//  	Не рекомендуется Передавать значение Ложь, так как все внутренние механизмы используют закэшированное значение
// 
// Возвращаемое значение:
//  Структура - Параметры расширенного глобального поиска:
// * КлючВидаПоискаВыбораКоманды - Строка - Ключевая строка, передается в вид поиска результата при выборе пользователем команды
// * Команды - см. КоллекцияКомандПараметровРасширенногоГлобальногоПоиска
// * ПолныеКлючиКоманд - см. КоллекцияВсехКомандПараметровРасширенногоГлобальногоПоиска
// * Описание - Строка - Описание глобального поиска. Если заполнено, устанавливается при начале работы системы
// * ПодсказкаВвода - Строка - Подсказка ввода глобального поиска. Если заполнено, устанавливается при начале работы системы
Функция ПараметрыРасширенногоГлобальногоПоиска(ИзКэша = Истина) Экспорт

	Если ИзКэша Тогда
		Возврат РГП_ГлобальныйПоискКлиентПовтИсп.ПараметрыРасширенногоГлобальногоПоиска();
	КонецЕсли;

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КлючВидаПоискаВыбораКоманды", "Команда расширенного глобального поиска");
	ПараметрыПоиска.Вставить("Команды", КоллекцияКомандПараметровРасширенногоГлобальногоПоиска());
	ПараметрыПоиска.Вставить("ПолныеКлючиКоманд", КоллекцияВсехКомандПараметровРасширенногоГлобальногоПоиска());
	ПараметрыПоиска.Вставить("Описание", "");
	ПараметрыПоиска.Вставить("ПодсказкаВвода", "");

	ЗаполнитьСтандартныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска);

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеЗаполненияПараметровРасширенногоГлобальногоПоиска(
		ПараметрыПоиска);

	Возврат ПараметрыПоиска;

КонецФункции

// Новая команда расширенного поиска.
// Данным методом можно создать свою команду расширенного поиска
// 
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыРасширенногоГлобальногоПоиска
//  Ключ - Строка - Короткий ключ команды. Нужен для идентификации команды в контексте родителя
//  Родитель - Неопределено
//  		 - см. НоваяКомандаРасширенногоПоиска
// 
// Возвращаемое значение:
//  Структура - Новая команда расширенного поиска:
// * Ключ - Строка - Короткий ключ команды
// * Команды - см. КоллекцияКомандПараметровРасширенногоГлобальногоПоиска
// * ПорядокКоманд - см. УпорядоченнаяКоллекцияКомандРасширенногоГлобальногоПоиска
// * ПланПоиска - ПланГлобальногоПоиска - План поиска, который необходимо применить при выборе команды. 
// 									Игнорируется, если есть подчиненные команды
// * ОткрываемоеЗначение - Произвольный - Если нет подчиненных команд и плана поиска, тогда открывается указанное значение
// * ОписаниеОповещения - Неопределено
// 					    - ОписаниеОповещения - При выборе команды сработает описание оповещения
// * Родитель - Неопределено - Команда верхнего уровня. В таком случае Ключ команды = Разделитель
// 			  - см. НоваяКомандаРасширенногоПоиска
// * Разделитель - Строка - Разделитель команды. Используется ключ команды верхнего уровня.
// * ВозможныПараметры - Булево - Если установлено в Истина, то строка поиска (после полного ключа) дополнительно разбивается на разделитель
// 							Например, "\ПолныйКлючКоманды\Параметр\СтрокаПоиска". Наследуется от родителя
// * ПолныйКлюч - Строка - Полный ключ команды по формату <ПолныйКлючРодителя> + <Ключ> + <Разделитель>
// * Представление - Строка - Строка, выводимая пользователю
// * Описание - Строка - Строка, выводимая пользователю в качестве описания
// * Использование - Булево - Если установить Ложь, то команда будет игнорироваться
// * ОтображатьВМеню - Булево - Если установить Ложь, то команда не будет видна в меню, но будет выполняться при ручном вводе
// * Картинка - Картинка - Картинка, выводимая пользователю
//            - Неопределено
// * ДополнительныеПараметры - Структура из КлючИЗначение - Параметры, копируемые в ДополнительныеПараметры выполняемого метода команды:
// ** Ключ - Строка
// ** Значение - Произвольный
Функция НоваяКомандаРасширенногоПоиска(ПараметрыВыполнения, Ключ, Родитель = Неопределено) Экспорт

	Команда = Новый Структура;
	Команда.Вставить("Ключ", Ключ);
	Команда.Вставить("Представление", "");
	Команда.Вставить("Описание", "");

	Команда.Вставить("Использование", Истина);
	Команда.Вставить("ОтображатьВМеню", Истина);

	Команда.Вставить("Команды", КоллекцияКомандПараметровРасширенногоГлобальногоПоиска());
	Команда.Вставить("ПорядокКоманд", УпорядоченнаяКоллекцияКомандРасширенногоГлобальногоПоиска());
	Команда.Вставить("ПланПоиска", Новый ПланГлобальногоПоиска);
	Команда.Вставить("ОткрываемоеЗначение", Неопределено);
	Команда.Вставить("ОписаниеОповещения", Неопределено);

	Команда.Вставить("Родитель", Родитель);
	Команда.Вставить("Разделитель", "");
	Команда.Вставить("ВозможныПараметры", Ложь);
	
	Команда.Вставить("ПолныйКлюч", "");
	Команда.Вставить("Картинка", Неопределено);
	Команда.Вставить("ДополнительныеПараметры", Новый Структура);

	Если Родитель = Неопределено Тогда
		Команда.Разделитель = Ключ;
		Команда.ПолныйКлюч  = Ключ;
		КоллекцияКоманды = ПараметрыВыполнения.Команды;
	Иначе
		Команда.ВозможныПараметры = Родитель.ВозможныПараметры;
		Команда.Разделитель = Родитель.Разделитель;
		Команда.ПолныйКлюч  = СтрШаблон("%1%2%3", Родитель.ПолныйКлюч, Ключ, Команда.Разделитель);
		Родитель.ПорядокКоманд.Добавить(Команда);
		КоллекцияКоманды = Родитель.Команды;
	КонецЕсли;
	
	КоллекцияКоманды.Вставить(ВРег(Ключ), Команда);
	ПараметрыВыполнения.ПолныеКлючиКоманд.Вставить(Команда.ПолныйКлюч, Команда);

	Возврат Команда; //@skip-check constructor-function-return-section - баг ЕДТ

КонецФункции

// Метод добавляет в описание команды новый элемент плана поиска, созданный на основе переданного эталона
// При этом в элемент плана поиска в Дополнительные параметры записывается структура из ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска()
// + в которой помимо свойств содержатся дополнительные параметры эталонного элемента и самой команды
// 
// Параметры:
//  Команда - см. НоваяКомандаРасширенногоПоиска
//  ЭталонныйЭлемент - ЭлементПланаГлобальногоПоиска:
//  * ДополнительныеПараметры - Структура из КлючИЗначение:
//  ** Ключ - Строка
//  ** Значение - Произвольный
Процедура ДобавитьВКомандуЭлементПланаПоиска(Команда, ЭталонныйЭлемент) Экспорт

	ПараметрыВыполнения = ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска(Команда);

	ЭталонныеДопПараметры = ЭталонныйЭлемент.ДополнительныеПараметры;
	Если ТипЗнч(ЭталонныеДопПараметры) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ЭталонныеДопПараметры Цикл
			ПараметрыВыполнения.ДополнительныеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	НовыйЭлемент = Новый ЭлементПланаГлобальногоПоиска(ЭталонныйЭлемент.ИмяПроцедуры, ЭталонныйЭлемент.Модуль,
		ЭталонныйЭлемент.НаСервере, ЭталонныйЭлемент.Фоновый, ЭталонныйЭлемент.Порядок, ПараметрыВыполнения);

	Команда.ПланПоиска.Добавить(НовыйЭлемент);

КонецПроцедуры

// Описание оповещения.
// 
// Параметры:
//  ДанныеОписания - Неопределено
//                 - ОписаниеОповещения
//                 - см. РГП_ГлобальныйПоискСервер.ОписаниеОповещения
// 
// Возвращаемое значение:
//  - ОписаниеОповещения
//  - Неопределено
Функция ОписаниеОповещения(Знач ДанныеОписания) Экспорт

	Если ТипЗнч(ДанныеОписания) = Тип("ОписаниеОповещения") Тогда

		ОписаниеОповещения = ДанныеОписания;

	ИначеЕсли РГП_ГлобальныйПоискКлиентСервер.ЗначениеСоответствуетШаблону(
		ДанныеОписания, РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения()) Тогда

		ДанныеОписания = ДанныеОписания; //см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения
		
		ОбщийМодульМетода = ОбщийМодуль(ДанныеОписания.Модуль);
		
		Если ЗначениеЗаполнено(ДанныеОписания.ИмяПроцедурыОбработкиОшибки) Тогда
			
			ОбщийМодульОбработкиОшибки = ОбщийМодуль(ДанныеОписания.МодульОбработкиОшибки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				ДанныеОписания.ИмяПроцедуры, ОбщийМодульМетода, ДанныеОписания.ДополнительныеПараметры, 
				ДанныеОписания.ИмяПроцедурыОбработкиОшибки, ОбщийМодульОбработкиОшибки);
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				ДанныеОписания.ИмяПроцедуры, ОбщийМодульМетода, ДанныеОписания.ДополнительныеПараметры);
			
		КонецЕсли;		

	Иначе

		ОписаниеОповещения = Неопределено;

	КонецЕсли;

	Возврат ОписаниеОповещения;

КонецФункции

// Параметры выполнения команды расширенного глобального поиска.
// 
// Параметры:
//  ОписаниеКоманды - см. НоваяКомандаРасширенногоПоиска
// 
// Возвращаемое значение:
//  см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска
Функция ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполнения = РГП_ГлобальныйПоискКлиентСервер.ПараметрыВыполненияКомандыРасширенногоГлобальногоПоиска();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ОписаниеКоманды);
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Данные результата глобального поиска на основе описания команды.
// 
// Параметры:
//  ОписаниеКоманды - см. НоваяКомандаРасширенногоПоиска
//  ДанныеПоиска - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеПоискаКомандыГлобальногоПоиска
// 
// Возвращаемое значение:
//  см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска
Функция ДанныеРезультатаГлобальногоПоискаНаОсновеОписанияКоманды(ОписаниеКоманды, ДанныеПоиска) Экспорт
	
	ДанныеРезультата = РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаГлобальногоПоиска();
	ЗаполнитьЗначенияСвойств(ДанныеРезультата, ОписаниеКоманды);
	
	Если ДанныеРезультата.ОписаниеОповещения = Неопределено 
		И ДанныеРезультата.ОткрываемоеЗначение = Неопределено Тогда
		
		РГП_ГлобальныйПоискКлиентСервер.ЗаполнитьПутьПереходаВДанныхРезультата(ДанныеРезультата, ДанныеПоиска);
		
	КонецЕсли;
	
	Возврат ДанныеРезультата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеКоманд

// Заполняет стандартные команды расширенного глобального поиска
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
Процедура ЗаполнитьСтандартныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска)

	ОбщаяКоманда = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "\");

	ЗаполнитьКомандыПоискаМетаданныхРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда);

	ЗаполнитьКомандыПоискаПоФормамРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда);

	ЗаполнитьИнформационныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда);

КонецПроцедуры

// Заполняет команды поиска метаданных расширенного глобального поиска
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
//  ОбщаяКоманда - см. НоваяКомандаРасширенногоПоиска
Процедура ЗаполнитьКомандыПоискаМетаданныхРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда)

	ЭлементПланаПоиска = Новый ЭлементПланаГлобальногоПоиска("ГлобальныйПоискМетаданные", "РГП_ГлобальныйПоискСервер",
		Истина, Ложь);

	КомандаПоискаМетаданных = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "М", ОбщаяКоманда);
	КомандаПоискаМетаданных.Представление = "Поиск по метаданным";
	КомандаПоискаМетаданных.Описание = "Поиск по именам, синонимам, представлениям и подсказкам";
	КомандаПоискаМетаданных.Картинка = БиблиотекаКартинок.ПоискДанных;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоискаМетаданных, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Все", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Все";
	КомандаПоиска.Описание = "Поиск по всем объектам метаданных";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПоискДанных;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Спр", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Справочники";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Справочник;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Док", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Документы";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Документ;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ЖД", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Журналы документов";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ЖурналДокументов;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Отч", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Отчеты";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Отчет;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Обр", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Обработки";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Обработка;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "РС", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Регистры сведений";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РегистрСведений;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "РН", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Регистры накопления";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РегистрНакопления;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "РБ", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Регистры бухгалтерии";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "БП", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Бизнес процессы";
	КомандаПоиска.Картинка = БиблиотекаКартинок.БизнесПроцесс;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Здч", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Задачи";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Задача;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПВР", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы видов расчета";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланВидовРасчета;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПВХ", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы видов характеристик";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланВидовХарактеристик;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПО", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы обмена";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланОбмена;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПС", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы счетов";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланСчетов;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаПоиска, ЭлементПланаПоиска);

КонецПроцедуры

// Заполняет команды поиска по формам
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
//  ОбщаяКоманда - см. НоваяКомандаРасширенногоПоиска
Процедура ЗаполнитьКомандыПоискаПоФормамРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда)

	ЭлементПланаПоискаФорм = Новый ЭлементПланаГлобальногоПоиска(
		"ГлобальныйПоискПоОткрытымОкнам", "РГП_ГлобальныйПоискКлиент", Ложь, Ложь);
	
	ЭлементПланаПоискаЭлементов = Новый ЭлементПланаГлобальногоПоиска(
		"ГлобальныйПоискПоЭлементамФормы", "РГП_ГлобальныйПоискКлиент", Ложь, Ложь);
	
	ОсновнаяКоманда = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Формы", ОбщаяКоманда);
	ОсновнаяКоманда.Представление = "Поиск по формам";
	ОсновнаяКоманда.Картинка = БиблиотекаКартинок.Форма;
	ДобавитьВКомандуЭлементПланаПоиска(ОсновнаяКоманда, ЭлементПланаПоискаФорм);
	
	КомандаЭлементы = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Э", ОсновнаяКоманда);
	КомандаЭлементы.Представление = "Элементы";
	КомандаЭлементы.Картинка = БиблиотекаКартинок.ПоказатьДанные;
	КомандаЭлементы.ВозможныПараметры = Истина;
	КомандаЭлементы.ОтображатьВМеню = Ложь;
	ДобавитьВКомандуЭлементПланаПоиска(КомандаЭлементы, ЭлементПланаПоискаЭлементов);

КонецПроцедуры

// Заполняет информационные команды расширенного глобального поиска
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
//  ОбщаяКоманда - см. НоваяКомандаРасширенногоПоиска
Процедура ЗаполнитьИнформационныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда)

	ИнформационнаяКоманда = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Инфо", ОбщаяКоманда);
	ИнформационнаяКоманда.Представление = "О расширении глобального поиска";
	ИнформационнаяКоманда.Картинка = БиблиотекаКартинок.Информация;

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "github", ИнформационнаяКоманда);
	КомандаПоиска.Представление = "Открыть репозиторий";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РГП_GitHub;
	КомандаПоиска.ОткрываемоеЗначение = "https://github.com/SeiOkami/AdvancedGlobalSearchOneS";

КонецПроцедуры

#КонецОбласти

#Область ОписанияТипов

// Упорядоченная коллекция команд расширенного глобального поиска.
// Нужна для правильного порядка вывода команд пользователю
// 
// Возвращаемое значение:
//  Массив из см. НоваяКомандаРасширенногоПоиска
Функция УпорядоченнаяКоллекцияКомандРасширенногоГлобальногоПоиска()

	Возврат Новый Массив;

КонецФункции

// Иерархическая коллекция команд параметров расширенного глобального поиска.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - см. НоваяКомандаРасширенногоПоиска
Функция КоллекцияКомандПараметровРасширенногоГлобальногоПоиска()

	Возврат Новый Соответствие;

КонецФункции

// Коллекция всех команд по полному ключу
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - см. НоваяКомандаРасширенногоПоиска
Функция КоллекцияВсехКомандПараметровРасширенногоГлобальногоПоиска()

	Возврат Новый Соответствие;

КонецФункции

#КонецОбласти

#Область Обработчики

// Общие параметры выполнения глобального поиска по открытым окнам.
// 
// Параметры:
//  СтрокаПоиска - см. ГлобальныйПоискПоОткрытымОкнам.СтрокаПоиска
//  РезультатыПоиска - см. ГлобальныйПоискПоОткрытымОкнам.РезультатыПоиска
//  ОписаниеКоманды - см. ГлобальныйПоискПоОткрытымОкнам.ОписаниеКоманды
// 
// Возвращаемое значение:
//  Структура - Общие параметры выполнения глобального поиска по открытым окнам:
// * ДанныеВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ДанныеПоискаКомандыГлобальногоПоиска
// * ВыводВсехДанных - Булево - Выводить ли все окна или искать среди них
// * КартинкаФорма - Картинка - Картинка для форм
// * КартинкаЗакрыть - Картинка - Картинка для команды закрытия
// * КартинкаОткрыть - Картинка - Картинка для команды открытия
// * КартинкаДанные - Картинка - Картинка для команды инспектирования
// * КартинкаОбновить - Картинка - Картинка для команды обновления
// * ОповещениеОткрытие - ОписаниеОповещения - Оповещение для открытия формы
// * ОповещениеЗакрытие - ОписаниеОповещения - Оповещение для закрытия формы
// * РезультатыПоиска - см. ГлобальныйПоискПоОткрытымОкнам.РезультатыПоиска
Функция ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымОкнам(СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды)
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ДанныеВыполнения", 
		РГП_ГлобальныйПоискКлиентСервер.ДанныеПоискаКомандыГлобальногоПоиска(ОписаниеКоманды, СтрокаПоиска));
	ОбщиеПараметры.Вставить("ВыводВсехДанных", НЕ ЗначениеЗаполнено(ОбщиеПараметры.ДанныеВыполнения.СловаПоиска));
	
	ОбщиеПараметры.Вставить("КартинкаФорма"    , БиблиотекаКартинок.Форма);
	ОбщиеПараметры.Вставить("КартинкаЗакрыть"  , БиблиотекаКартинок.Закрыть);
	ОбщиеПараметры.Вставить("КартинкаОткрыть"  , БиблиотекаКартинок.ПолеВводаОткрыть);
	ОбщиеПараметры.Вставить("КартинкаДанные"   , БиблиотекаКартинок.ПоказатьДанные);
	ОбщиеПараметры.Вставить("КартинкаОбновить" , БиблиотекаКартинок.Обновить);
	
	ОбщиеПараметры.Вставить("ОповещениеОткрытие", Новый ОписаниеОповещения("АктивироватьФорму", ЭтотОбъект));
	ОбщиеПараметры.Вставить("ОповещениеЗакрытие", Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект));
	
	ОбщиеПараметры.Вставить("РезультатыПоиска", РезультатыПоиска);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

// Глобальный поиск по открытым окнам - вывести открытые формы.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымОкнам
Процедура ГлобальныйПоискПоОткрытымОкнам_ВывестиОткрытыеФормы(ОбщиеПараметры)
	
	ОткрытыеОкна = ПолучитьОкна();
	Для Каждого Окно Из ОткрытыеОкна Цикл
		
		Для Каждого Форма Из Окно.Содержимое Цикл

			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда

				ФормаПодходит = ОбщиеПараметры.ВыводВсехДанных;

				Для Каждого СловоПоиска Из ОбщиеПараметры.ДанныеВыполнения.СловаПоиска Цикл

					Если ФормаПодходит Тогда
						Прервать;
					КонецЕсли;

					Если СтрНайти(Форма.Заголовок, СловоПоиска) > 0 
						ИЛИ СтрНайти(Окно.Заголовок, СловоПоиска) > 0
						ИЛИ СтрНайти(Форма.ИмяФормы, СловоПоиска) > 0 Тогда
						ФормаПодходит = Истина;
					КонецЕсли;

				КонецЦикла;

				Если ФормаПодходит Тогда
					
					ПредставлениеРезультата = ?(ПустаяСтрока(Форма.Заголовок), Окно.Заголовок, Форма.Заголовок);
					ГлобальныйПоискПоОткрытымОкнам_ДобавитьРезультат(ОбщиеПараметры, Форма, ПредставлениеРезультата);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск по открытым окнам - добавить стандартные результаты.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымОкнам
Процедура ГлобальныйПоискПоОткрытымОкнам_ДобавитьСтандартныеРезультаты(ОбщиеПараметры)
	
	РезультатыПоиска = ОбщиеПараметры.РезультатыПоиска;
	ДанныеПоиска = ОбщиеПараметры.ДанныеВыполнения;
	
	РГП_ГлобальныйПоискКлиентСервер.ДобавитьЭлементРезультатаКомандаВводаСтрокиНаОсновеДанныхПоиска(РезультатыПоиска, ДанныеПоиска);
	
	ДанныеРезультатаОбновить = ДанныеРезультатаНаОсновеДанныхВыполнения(ДанныеПоиска);
	РГП_ГлобальныйПоискКлиентСервер.ЗаполнитьПутьПереходаВДанныхРезультата(ДанныеРезультатаОбновить, ДанныеПоиска);
	ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
		ДанныеРезультатаОбновить, "Обновить", ОбщиеПараметры.КартинкаОбновить);
	ОбщиеПараметры.РезультатыПоиска.Добавить(ЭлементРезультата);
	
КонецПроцедуры

// Глобальный поиск по открытым окнам добавить результат.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымОкнам
//  Форма - ФормаКлиентскогоПриложения
//  ПредставлениеРезультата - Строка
Процедура ГлобальныйПоискПоОткрытымОкнам_ДобавитьРезультат(ОбщиеПараметры, Форма, ПредставлениеРезультата)
	
	ДанныеРезультатаОткрытие = ДанныеРезультатаНаОсновеДанныхВыполнения(ОбщиеПараметры.ДанныеВыполнения);
	ДанныеРезультатаОткрытие.ДополнительныеПараметры.Вставить("Форма", Форма);
	ДанныеРезультатаОткрытие.ОписаниеОповещения = ОбщиеПараметры.ОповещениеОткрытие;
	ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
		ДанныеРезультатаОткрытие, ПредставлениеРезультата, ОбщиеПараметры.КартинкаФорма);
	
	ЭлементРезультата.Действия.Добавить(ДанныеРезультатаОткрытие, "Открыть", ОбщиеПараметры.КартинкаОткрыть);
	
	ДанныеРезультатаЗакрытие = ДанныеРезультатаНаОсновеДанныхВыполнения(ОбщиеПараметры.ДанныеВыполнения);
	РГП_ГлобальныйПоискКлиентСервер.ЗаполнитьПутьПереходаВДанныхРезультата(
		ДанныеРезультатаЗакрытие, ОбщиеПараметры.ДанныеВыполнения);
	
	ДанныеРезультатаЗакрытие.ДополнительныеПараметры.Вставить("Форма", Форма);
	ДанныеРезультатаЗакрытие.ОписаниеОповещения = ОбщиеПараметры.ОповещениеЗакрытие;
	ЭлементРезультата.Действия.Добавить(ДанныеРезультатаЗакрытие, "Закрыть", ОбщиеПараметры.КартинкаЗакрыть);
	
	ДанныеРезультатаИнспектировать = ДанныеРезультатаНаОсновеДанныхВыполнения(ОбщиеПараметры.ДанныеВыполнения);
	РГП_ГлобальныйПоискКлиентСервер.ЗаполнитьПутьПереходаВДанныхРезультата(
		ДанныеРезультатаИнспектировать, ОбщиеПараметры.ДанныеВыполнения, "Э", Форма.УникальныйИдентификатор);
	ЭлементРезультата.Действия.Добавить(ДанныеРезультатаИнспектировать, "Элементы", ОбщиеПараметры.КартинкаДанные);

	ОбщиеПараметры.РезультатыПоиска.Добавить(ЭлементРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

// Форма по уникальному идентификатору.
// 
// Параметры:
//  ИдентификаторФормы - Строка, УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//  Неопределено, ФормаКлиентскогоПриложения -
Функция ФормаПоУникальномуИдентификатору(ИдентификаторФормы)
	
	Попытка
		ИдентификаторФормы = Новый УникальныйИдентификатор(ИдентификаторФормы);
	Исключение
		Возврат Неопределено;//Это не УИД;
	КонецПопытки;
	
	Для Каждого Окно Из ПолучитьОкна() Цикл

		Для Каждого Форма Из Окно.Содержимое Цикл //ФормаКлиентскогоПриложения

			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") 
				И Форма.УникальныйИдентификатор = ИдентификаторФормы Тогда
				Возврат Форма;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//см. РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаНаОсновеДанныхВыполнения
Функция ДанныеРезультатаНаОсновеДанныхВыполнения(ДанныеВыполнения)
	
	Возврат РГП_ГлобальныйПоискКлиентСервер.ДанныеРезультатаНаОсновеДанныхВыполнения(ДанныеВыполнения);
	
КонецФункции

// Общий модуль.
// 
// Параметры:
//  ИмяИлиМодуль - ОбщийМодуль, Строка - Имя или модуль
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция ОбщийМодуль(ИмяИлиМодуль)

	Если ТипЗнч(ИмяИлиМодуль) = Тип("Строка") Тогда
		ВременнаяСтруктура = Новый Структура;
		ВременнаяСтруктура.Вставить(ИмяИлиМодуль); //Проверка на корректную строку
		Возврат Вычислить(ИмяИлиМодуль); //ОбщийМодуль
	Иначе
		Возврат ИмяИлиМодуль;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
