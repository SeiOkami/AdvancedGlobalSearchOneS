// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияМодуляПриложения

// Событие модуля приложения "ПриНачалеРаботыСистемы"
// Производим инициализацию параметров поиска
Процедура ПриНачалеРаботыСистемы() Экспорт

	ПараметрыПоиска = ПараметрыРасширенногоГлобальногоПоиска();

	Если ЗначениеЗаполнено(ПараметрыПоиска.Описание) Тогда
		ГлобальныйПоиск.УстановитьОписание(ПараметрыПоиска.Описание);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПоиска.ПодсказкаВвода) Тогда
		ГлобальныйПоиск.УстановитьПодсказкуВвода(ПараметрыПоиска.ПодсказкаВвода);
	КонецЕсли;

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеСобытияПриНачалеРаботыСистемы();

КонецПроцедуры

// Событие модуля приложения "ПриГлобальномПоиске"
// Анализируем введенную строку на наличие команд расширенного поиска
// 
// Параметры:
//  ИзначальнаяСтрокаПоиска - Строка - Строка, введенная пользователем или скриптом в поле глобального поиска
//  ПланПоиска - ПланГлобальногоПоиска - Текущий план выполнения глобального поиска.
Процедура ПриГлобальномПоиске(ИзначальнаяСтрокаПоиска, ПланПоиска) Экспорт

	СтрокаПоиска = ВРег(СокрЛП(ИзначальнаяСтрокаПоиска));

	ПараметрыПоиска = ПараметрыРасширенногоГлобальногоПоиска();
	Для Каждого КлючИЗначение Из ПараметрыПоиска.Команды Цикл

		Если Не СтрНачинаетсяС(СтрокаПоиска, КлючИЗначение.Ключ) Или Не КлючИЗначение.Значение.Использование Тогда
			Продолжить;
		КонецЕсли;

		ПланПоиска.Очистить();

		СтрокаПоиска = Сред(СтрокаПоиска, СтрДлина(КлючИЗначение.Ключ) + 1);

		ТекущаяКоманда = КлючИЗначение.Значение; //см. НоваяКомандаРасширенногоПоиска
		ЧастиСтрокиПоиска = СтрРазделить(СтрокаПоиска, ТекущаяКоманда.Разделитель, Истина);
		Для Каждого ЧастьСтроки Из ЧастиСтрокиПоиска Цикл
			ПодчиненнаяКоманда = ТекущаяКоманда.Команды.Получить(ЧастьСтроки); //см. НоваяКомандаРасширенногоПоиска
			Если ПодчиненнаяКоманда = Неопределено Или Не ПодчиненнаяКоманда.Использование Тогда
				Прервать;
			Иначе
				ТекущаяКоманда = ПодчиненнаяКоманда;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыВыполнения = ПараметрыВыполненияКомандыПоиска(ИзначальнаяСтрокаПоиска, ТекущаяКоманда);
		Для Каждого СтандартнаяКоманда Из ТекущаяКоманда.СтандартныеКомандыШапки Цикл
			ДобавитьСтандартнуюКомандуПоискаВПлан(ПланПоиска, СтандартнаяКоманда, ПараметрыВыполнения);
		КонецЦикла;

		Для Каждого ЭлементПлана Из ТекущаяКоманда.ПланПоиска Цикл
			ПланПоиска.Добавить(ЭлементПлана.ИмяПроцедуры, ЭлементПлана.Модуль, ЭлементПлана.НаСервере,
				ЭлементПлана.Фоновый, ПланПоиска.Количество(), ПараметрыВыполнения);
		КонецЦикла;
		
		Для Каждого СтандартнаяКоманда Из ТекущаяКоманда.СтандартныеКомандыПодвала Цикл
			ДобавитьСтандартнуюКомандуПоискаВПлан(ПланПоиска, СтандартнаяКоманда, ПараметрыВыполнения);
		КонецЦикла;

	КонецЦикла;

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().
		ПослеСобытияПриГлобальномПоиске(ИзначальнаяСтрокаПоиска, ПланПоиска);

КонецПроцедуры

// Событие модуля приложения "ПриВыбореРезультатаГлобальногоПоиска"
// Когда пользователь выбрал одну из команд расширенного глобального поиска, мы программно вводим её полный ключ в поле поиска
// 
// Параметры:
//  ЭлементРезультата - ЭлементРезультатаГлобальногоПоиска:
//  * Значение - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  СтандартнаяОбработка - Булево
Процедура ПриВыбореРезультатаГлобальногоПоиска(Знач ЭлементРезультата, СтандартнаяОбработка) Экспорт
	
	Если РГП_ГлобальныйПоискКлиентСервер.ЭтоЭлементРезультатаРасширенногоГлобальногоПоиска(ЭлементРезультата) Тогда
		ОбработатьДанныеРезультатаГлобальногоПоиска(ЭлементРезультата.Значение, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// При выборе действия результата глобального поиска.
// 
// Параметры:
//  ЭлементРезультата - ЭлементРезультатаГлобальногоПоиска
//  Действие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
Процедура ПриВыбореДействияРезультатаГлобальногоПоиска(ЭлементРезультата, Действие) Экспорт
	
	Если РГП_ГлобальныйПоискКлиентСервер.ЭтоЭлементРезультатаРасширенногоГлобальногоПоиска(ЭлементРезультата) Тогда
		ОбработатьДанныеРезультатаГлобальногоПоиска(Действие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиГлобальногоПоиска

// Метод плана глобального поиска для вывода подчиненных команд пользователю
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
Процедура ОбработчикСтандартнойКомандыПоиска_ВывестиКоманды(СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	ОписаниеКоманды = ПараметрыРасширенногоГлобальногоПоиска().ПолныеКлючиКоманд.Получить(ПараметрыВыполнения.ПолныйКлюч);
	Для Каждого ПодчиненнаяКоманда Из ОписаниеКоманды.ПорядокКоманд Цикл //см. НоваяКомандаРасширенногоПоиска

		Если Не ПодчиненнаяКоманда.Использование Или Не ПодчиненнаяКоманда.ОтображатьВМеню Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяКоманда.ВыполняемоеДействие = Неопределено Тогда
			ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеПереходаНаКоманду(
				ПараметрыВыполнения, ПодчиненнаяКоманда.Ключ);
		Иначе
			ВыполняемоеДействие = ПодчиненнаяКоманда.ВыполняемоеДействие;
		КонецЕсли;
		
		ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие, 
			ПодчиненнаяКоманда.Представление, ПодчиненнаяКоманда.Картинка, ПодчиненнаяКоманда.Описание);
		РезультатыПоиска.Добавить(ЭлементРезультата);

	КонецЦикла;

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеВыводаПодчиненныхКомандГлобальногоПоиска(
		СтрокаПоиска, РезультатыПоиска, ОписаниеКоманды);

КонецПроцедуры

// Метод плана глобального поиска стандартной команды ввода строки
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ОбработчикСтандартнойКомандыПоиска_ВводСтроки(СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	РГП_ГлобальныйПоискКлиентСервер.ДобавитьЭлементРезультатаСтандартнойКоманды_ВводСтроки(РезультатыПоиска, ПараметрыВыполнения);

КонецПроцедуры

// Метод плана глобального поиска стандартной команды обновления результатов поиска
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ОбработчикСтандартнойКомандыПоиска_Обновить(СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	РГП_ГлобальныйПоискКлиентСервер.ДобавитьЭлементРезультатаСтандартнойКоманды_Обновить(РезультатыПоиска, ПараметрыВыполнения);

КонецПроцедуры

// Метод плана глобального поиска стандартной команды возвращения на команду вверх
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ОбработчикСтандартнойКомандыПоиска_Назад(СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	ДобавитьЭлементРезультатаСтандартнойКоманды_Назад(РезультатыПоиска, ПараметрыВыполнения);

КонецПроцедуры

// Добавить обработчик стандартной команды глобального поиска в план
// 
// Параметры:
//  ПланПоиска - см. ПриГлобальномПоиске.ПланПоиска
//  ИмяКоманды - Строка - см. РГП_ГлобальныйПоискКлиентСервер.СтандартныеКоманды
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ДобавитьСтандартнуюКомандуПоискаВПлан(ПланПоиска, ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	ИмяМетодаОбработчика = СтрШаблон("ОбработчикСтандартнойКомандыПоиска_%1", ИмяКоманды);
	ПланПоиска.Добавить(ИмяМетодаОбработчика, "РГП_ГлобальныйПоискКлиент", Ложь, Ложь, ПланПоиска.Количество(), ПараметрыВыполнения);
	
КонецПроцедуры

// Метод плана глобального для поиска по открытым окнам
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ГлобальныйПоискПоОткрытымОкнам(Знач СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	ОбщиеПараметры = ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымФормам(СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения);
	
	ГлобальныйПоискПоОткрытымФормам_ВывестиОткрытыеФормы(ОбщиеПараметры);

КонецПроцедуры

// Метод плана глобального для поиска по открытым окнам
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ГлобальныйПоискПоЭлементамФормы(Знач СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	Если НЕ ЗначениеЗаполнено(ПараметрыВыполнения.ПараметрыКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ОбщиеПараметрыВыполненияПоискаПоЭлементамФормы(ПараметрыВыполнения);
	Если ОбщиеПараметры.Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщиеПараметры.ВыводВсехЭлементов Тогда
		ГлобальныйПоискПоЭлементамФормы_НайтиПодходящиеЭлементы(ОбщиеПараметры);
	КонецЕсли;
	
	ГлобальныйПоискПоЭлементамФормы_ДобавитьРезультаты(ОбщиеПараметры, РезультатыПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатаГлобальногоПоиска

// Показать поле ввода строки поиска
// 
// Параметры:
//  ВыполняемоеДействие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  ПараметрыДействия - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыДействияВводаСтроки
Процедура ОтобразитьВводСтроки(ВыполняемоеДействие, ПараметрыДействия) Экспорт
	
	ОписаниеОкончанияВвода = Новый ОписаниеОповещения("ПоместитьСтрокуВКонецПоиска", ЭтотОбъект, ПараметрыДействия);
	ПоказатьВводСтроки(ОписаниеОкончанияВвода, ПараметрыДействия.НачальнаяСтрока, ПараметрыДействия.Представление);
	
КонецПроцедуры

// Поместить введенную строку в конец строки поиска
// 
// Параметры:
//  Строка - Строка, Неопределено - 
//  ПараметрыДействия - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыДействияВводаСтроки
Процедура ПоместитьСтрокуВКонецПоиска(Строка, ПараметрыДействия) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Строка") Тогда
		
		ГлобальныйПоиск.НачатьПоиск(ПараметрыДействия.СтрокаПоиска + Строка);
		
	КонецЕсли;
	
КонецПроцедуры

// Активировать форму.
// 
// Параметры:
//  ВыполняемоеДействие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  ДополнительныеПараметры - Произвольный
Процедура АктивироватьФорму(ВыполняемоеДействие, ДополнительныеПараметры) Экспорт
	
	Форма = Неопределено; //ФормаКлиентскогоПриложения
	Если ВыполняемоеДействие.ДополнительныеПараметры.Свойство("Форма", Форма) Тогда
		Форма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

// Закрыть форму.
// 
// Параметры:
//  ВыполняемоеДействие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  ДополнительныеПараметры - Произвольный
Процедура ЗакрытьФорму(ВыполняемоеДействие, ДополнительныеПараметры) Экспорт
	
	Форма = Неопределено; //ФормаКлиентскогоПриложения
	Если ВыполняемоеДействие.ДополнительныеПараметры.Свойство("Форма", Форма) Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Активировать элемент формы
// 
// Параметры:
//  ВыполняемоеДействие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  ДополнительныеПараметры - Произвольный
Процедура АктивироватьЭлементФормы(ВыполняемоеДействие, ДополнительныеПараметры) Экспорт
	
	Форма   = Неопределено; //ФормаКлиентскогоПриложения
	Элемент = Неопределено; //ПолеВвода
	Если ВыполняемоеДействие.ДополнительныеПараметры.Свойство("Форма", Форма)
		И ВыполняемоеДействие.ДополнительныеПараметры.Свойство("Элемент", Элемент) Тогда
		
		Форма.ТекущийЭлемент = Элемент; //@skip-check statement-type-change
		
	КонецЕсли;
	
КонецПроцедуры

// Выделить элемент формы
// 
// Параметры:
//  ВыполняемоеДействие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  ДополнительныеПараметры - Произвольный
Процедура ВыделитьЭлементФормы(ВыполняемоеДействие, ДополнительныеПараметры) Экспорт
	
	Форма   = Неопределено; //ФормаКлиентскогоПриложения
	Элемент = Неопределено; //ПолеВвода
	Если ВыполняемоеДействие.ДополнительныеПараметры.Свойство("Форма", Форма)
		И ВыполняемоеДействие.ДополнительныеПараметры.Свойство("Элемент", Элемент) Тогда
		
		НовыеСвойства = Новый Структура;
		НовыеСвойства.Вставить("ЦветРамки", WebЦвета.Красный);
		НовыеСвойства.Вставить("ЦветФона" , WebЦвета.СветлоЖелтый);
		
		ЗаполнитьЗначенияСвойств(Элемент, НовыеСвойства);
		
		Форма.ТекущийЭлемент = Элемент; //@skip-check statement-type-change
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыРаботыСРасширеннымПоиском

// Параметры выполнения команды поиска.
// 
// Параметры:
//  СтрокаПоиска - Строка
//  Команда - см. НоваяКомандаРасширенногоПоиска
// 
// Возвращаемое значение:
//  см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
Функция ПараметрыВыполненияКомандыПоиска(СтрокаПоиска, Команда) Экспорт
	
	ПараметрыВыполнения = РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Команда);
	
	ПараметрыВыполнения.ПолныйКлючСКомандами = ПараметрыВыполнения.ПолныйКлюч;
	
	СтрокаПоиска = СокрЛП(Сред(СтрокаПоиска, СтрДлина(ПараметрыВыполнения.ПолныйКлюч) + 1));
	
	Если ПараметрыВыполнения.ВозможныПараметры Тогда
		
		ПараметрыКоманды  = СтрРазделить(СтрокаПоиска, ПараметрыВыполнения.Разделитель);
		ГраницаПараметров = ПараметрыКоманды.ВГраница();
		Если ГраницаПараметров > 0 Тогда
			СтрокаПоиска = ПараметрыКоманды.Получить(ГраницаПараметров);
			ПараметрыКоманды.Удалить(ГраницаПараметров);
			ПараметрыВыполнения.ПараметрыКоманды = ПараметрыКоманды;
			ПараметрыВыполнения.ПолныйКлючСКомандами = СтрШаблон("%1%2%3", 
				ПараметрыВыполнения.ПолныйКлючСКомандами, 
				СтрСоединить(ПараметрыВыполнения.ПараметрыКоманды, ПараметрыВыполнения.Разделитель), 
				ПараметрыВыполнения.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыполнения.СтрокаПоиска = СтрокаПоиска;
	ПараметрыВыполнения.СтрокаПоискаВрег = ВРег(СтрокаПоиска);
	ПараметрыВыполнения.СловаПоиска = СтрРазделить(ПараметрыВыполнения.СтрокаПоискаВрег, " .\/", Ложь);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Обработать данные результата глобального поиска.
// 
// Параметры:
//  ВыполняемоеДействие - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
//  СтандартнаяОбработка - Булево
Процедура ОбработатьДанныеРезультатаГлобальногоПоиска(ВыполняемоеДействие, СтандартнаяОбработка = Истина) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыполняемоеДействие) = Тип("Структура") Тогда

		ОписаниеОповещения = ОписаниеОповещения(ВыполняемоеДействие.ОписаниеОповещения);
		Если ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВыполняемоеДействие);
		КонецЕсли;
		
		Если ВыполняемоеДействие.ОткрываемоеЗначение <> Неопределено Тогда
			ПоказатьОткрываемоеЗначение(ВыполняемоеДействие.ОткрываемоеЗначение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыполняемоеДействие.ПутьПерехода) Тогда
			ГлобальныйПоиск.НачатьПоиск(ВыполняемоеДействие.ПутьПерехода);
		КонецЕсли;
		
		Если ВыполняемоеДействие.ОткрываемаяФорма <> Неопределено Тогда
			
			ОткрываемаяФорма = ВыполняемоеДействие.ОткрываемаяФорма; //см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОткрываемойФормы
			
			//@skip-check invocation-parameter-type-intersect
			ОткрытьФорму(ОткрываемаяФорма.ИмяФормы, ОткрываемаяФорма.Параметры, 
				ОткрываемаяФорма.Владелец, ОткрываемаяФорма.Уникальность,
				ОткрываемаяФорма.Окно, ОткрываемаяФорма.НавигационнаяСсылка,
				ОткрываемаяФорма.ОписаниеОповещенияОЗакрытии, ОткрываемаяФорма.РежимОткрытияОкна);
				
		КонецЕсли;
	
	Иначе
		
		ПоказатьОткрываемоеЗначение(ВыполняемоеДействие);
				
	КонецЕсли;

КонецПроцедуры

// Показать открываемое значение.
// 
// Параметры:
//  ОткрываемоеЗначение - Строка - Навигационная ссылка
//						- Произвольный - Открываемое значение
Процедура ПоказатьОткрываемоеЗначение(ОткрываемоеЗначение) Экспорт
	
	Если ЭтоНавигационнаяСсылка(ОткрываемоеЗначение) Тогда
		ПерейтиПоНавигационнойСсылке(ОткрываемоеЗначение);
	Иначе
		ПоказатьЗначение(Неопределено, ОткрываемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Это навигационная ссылка.
// 
// Параметры:
//  Значение - Строка
//           - Произвольный
// 
// Возвращаемое значение:
//  Булево - Это навигационная ссылка
Функция ЭтоНавигационнаяСсылка(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип("Строка") 
		И (СтрНачинаетсяС(Значение, "e1cib/") 
			ИЛИ СтрНачинаетсяС(Значение, "http"));
	
КонецФункции

// Параметры расширенного глобального поиска
// Именять содержимое можно только в переропределяемом событии "ПослеЗаполненияПараметровРасширенногоГлобальногоПоиска"
// 
// Параметры:
//  ИзКэша - Булево - Выбирать ли закэшированную структуру
//  	Не рекомендуется Передавать значение Ложь, так как все внутренние механизмы используют закэшированное значение
// 
// Возвращаемое значение:
//  Структура - Параметры расширенного глобального поиска:
// * КлючВидаПоискаВыбораКоманды - Строка - Ключевая строка, передается в вид поиска результата при выборе пользователем команды
// * Команды - см. КоллекцияКомандПараметровРасширенногоГлобальногоПоиска
// * ПолныеКлючиКоманд - см. КоллекцияВсехКомандПараметровРасширенногоГлобальногоПоиска
// * Описание - Строка - Описание глобального поиска. Если заполнено, устанавливается при начале работы системы
// * ПодсказкаВвода - Строка - Подсказка ввода глобального поиска. Если заполнено, устанавливается при начале работы системы
// * ОписаниеРасширения - см. ОписаниеРасширения
Функция ПараметрыРасширенногоГлобальногоПоиска(ИзКэша = Истина) Экспорт

	Если ИзКэша Тогда
		Возврат РГП_ГлобальныйПоискКлиентПовтИсп.ПараметрыРасширенногоГлобальногоПоиска();
	КонецЕсли;

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КлючВидаПоискаВыбораКоманды", "Команда расширенного глобального поиска");
	ПараметрыПоиска.Вставить("Команды", КоллекцияКомандПараметровРасширенногоГлобальногоПоиска());
	ПараметрыПоиска.Вставить("ПолныеКлючиКоманд", КоллекцияВсехКомандПараметровРасширенногоГлобальногоПоиска());
	ПараметрыПоиска.Вставить("Описание", "");
	ПараметрыПоиска.Вставить("ПодсказкаВвода", "");
	
	ПараметрыПоиска.Вставить("ОписаниеРасширения", ОписаниеРасширения());

	//@skip-check unknown-method-property - баг ЕДТ
	РГП_ГлобальныйПоискВызовСервера.ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска(ПараметрыПоиска);

	ЗаполнитьСтандартныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска);

	РГП_ГлобальныйПоискКлиентПереопределяемый.Модуль().ПослеЗаполненияПараметровРасширенногоГлобальногоПоиска(
		ПараметрыПоиска);

	Возврат ПараметрыПоиска;

КонецФункции

// Новая команда расширенного поиска.
// Данным методом можно создать свою команду расширенного поиска
// 
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыРасширенногоГлобальногоПоиска
//  Ключ - Строка - Короткий ключ команды. Нужен для идентификации команды в контексте родителя
//  Родитель - Неопределено
//  		 - см. НоваяКомандаРасширенногоПоиска
//  ПорядокРодителя - Неопределено, Число - Порядок команды в родителе
// 
// Возвращаемое значение:
//  Структура - Новая команда расширенного поиска:
// * Ключ - Строка - Короткий ключ команды
// * ПолныйКлюч - Строка - Полный ключ команды по формату <ПолныйКлючРодителя> + <Ключ> + <Разделитель>
// * Родитель - Неопределено - Команда верхнего уровня. В таком случае Ключ команды = Разделитель
// 			  - см. НоваяКомандаРасширенногоПоиска
// * Разделитель - Строка - Разделитель команды. Используется ключ команды верхнего уровня.
// * ВозможнаСтрокаПоиска - Булево - Если установлено в Ложь, то команда не может содержать строку поиска и при возврате Назад она будет очищена
// * ВозможныПараметры - Булево - Если установлено в Истина, то строка поиска (после полного ключа) дополнительно разбивается на разделитель
// 							Например, "\ПолныйКлючКоманды\Параметр\СтрокаПоиска". Наследуется от родителя
// * Команды - см. КоллекцияКомандПараметровРасширенногоГлобальногоПоиска
// * ПорядокКоманд - см. УпорядоченнаяКоллекцияКомандРасширенногоГлобальногоПоиска
// * Представление - Строка - Строка, выводимая пользователю
// * Описание - Строка - Строка, выводимая пользователю в качестве описания
// * Картинка - Картинка - Картинка, выводимая пользователю
//            - Неопределено
// * Использование - Булево - Если установить Ложь, то команда будет игнорироваться
// * ОтображатьВМеню - Булево - Если установить Ложь, то команда не будет видна в меню, но будет выполняться при ручном вводе
// * СтандартныеКомандыШапки - Массив из Строка - Массив стандартных вспомогательных команд в начале списка результата, см. РГП_ГлобальныйПоискКлиентСервер.СтандартныеКоманды
// * СтандартныеКомандыПодвала - Массив из Строка - Массив стандартных вспомогательных команд в конце списка результата, см. РГП_ГлобальныйПоискКлиентСервер.СтандартныеКоманды
// * ПланПоиска - Массив из см. ЭлементПланаГлобальногоПоискаКоманды - Методы, который необходимо добавить в план поиска
// * ВыполняемоеДействие - Неопределено - Что выполнится при нажатии на команду. Если не заполнено, то переход по полному пути
// 						 - см. РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействие
// * ЛимитСтрокРезультата - Число - Максимальное число строк результата (передается в метод поиска)
// * ДополнительныеПараметры - Структура из КлючИЗначение - Параметры, копируемые в ДополнительныеПараметры выполняемого метода команды:
// ** Ключ - Строка
// ** Значение - Произвольный
Функция НоваяКомандаРасширенногоПоиска(ПараметрыВыполнения, Ключ, Родитель = Неопределено, Знач ПорядокРодителя = Неопределено) Экспорт

	КорневаяКоманда = (Родитель = Неопределено);

	Команда = Новый Структура;
	
	//Структура команды
	Команда.Вставить("Ключ", Ключ);
	Команда.Вставить("ПолныйКлюч", "");
	Команда.Вставить("Родитель", Родитель);
	Команда.Вставить("Разделитель", "");
	Команда.Вставить("ВозможныПараметры", Ложь);
	Команда.Вставить("ВозможнаСтрокаПоиска", Истина);
	Команда.Вставить("Команды", КоллекцияКомандПараметровРасширенногоГлобальногоПоиска());
	Команда.Вставить("ПорядокКоманд", УпорядоченнаяКоллекцияКомандРасширенногоГлобальногоПоиска());
	
	//Отображение
	Команда.Вставить("Представление", "");
	Команда.Вставить("Описание", "");
	Команда.Вставить("Картинка", Неопределено);
	
	//Доступность
	Команда.Вставить("Использование", Истина);
	Команда.Вставить("ОтображатьВМеню", Истина);
	
	//Выполняемое действие
	Команда.Вставить("ПланПоиска", Новый Массив); //Массив из см. ЭлементПланаГлобальногоПоискаКоманды
	Команда.Вставить("ВыполняемоеДействие", Неопределено);

	//Дополнительные параметры
	Команда.Вставить("ЛимитСтрокРезультата", 50);
	Команда.Вставить("ДополнительныеПараметры", Новый Структура);

	СтандартныеКоманды = РГП_ГлобальныйПоискКлиентСервер.СтандартныеКоманды();
	СтандартныеКомандыШапки = Новый Массив; //Массив из Строка
	СтандартныеКомандыПодвала = Новый Массив; //Массив из Строка
	
	//Заполнение из родителя
	Если КорневаяКоманда Тогда
		
		Команда.Разделитель = Ключ;
		Команда.ПолныйКлюч  = Ключ;
		КоллекцияКоманды = ПараметрыВыполнения.Команды;
		
	Иначе
		
		Команда.ВозможныПараметры = Родитель.ВозможныПараметры;
		Команда.Разделитель = Родитель.Разделитель;
		Команда.ПолныйКлюч  = СтрШаблон("%1%2%3", Родитель.ПолныйКлюч, Ключ, Команда.Разделитель);
		
		ПорядокРодителя = ?(ПорядокРодителя = Неопределено, Родитель.ПорядокКоманд.Количество(), ПорядокРодителя);
		Родитель.ПорядокКоманд.Вставить(ПорядокРодителя, Команда);
		КоллекцияКоманды = Родитель.Команды;
		
		СтандартныеКомандыШапки.Добавить(СтандартныеКоманды.Назад);
		СтандартныеКомандыШапки.Добавить(СтандартныеКоманды.ВводСтроки);
		СтандартныеКомандыШапки.Добавить(СтандартныеКоманды.Обновить);
		
	КонецЕсли;
	
	СтандартныеКомандыПодвала.Добавить(СтандартныеКоманды.ВывестиКоманды);
		
	//Стандартные команды
	Команда.Вставить("СтандартныеКомандыШапки", СтандартныеКомандыШапки); //Массив из Строка
	Команда.Вставить("СтандартныеКомандыПодвала" , СтандартныеКомандыПодвала); //Массив из Строка

	//Добавляем в иерархию и кэши
	КоллекцияКоманды.Вставить(ВРег(Ключ), Команда);
	ПараметрыВыполнения.ПолныеКлючиКоманд.Вставить(Команда.ПолныйКлюч, Команда);

	Возврат Команда; //@skip-check constructor-function-return-section - баг ЕДТ

КонецФункции

// Исключить стандартную команду из команды поиска.
// 
// Параметры:
//  КомандаПоиска - см. НоваяКомандаРасширенногоПоиска
//  СтандартнаяКоманда - Строка - см. РГП_ГлобальныйПоискКлиентСервер.СтандартныеКоманды
Процедура ИсключитьСтандартнуюКомандуИзКомандыПоиска(КомандаПоиска, СтандартнаяКоманда) Экспорт
	
	ИндексЭлемента = КомандаПоиска.СтандартныеКомандыШапки.Найти(СтандартнаяКоманда);
	Если ИндексЭлемента <> Неопределено Тогда
		КомандаПоиска.СтандартныеКомандыШапки.Удалить(ИндексЭлемента);
	КонецЕсли;
	
	ИндексЭлемента = КомандаПоиска.СтандартныеКомандыПодвала.Найти(СтандартнаяКоманда);
	Если ИндексЭлемента <> Неопределено Тогда
		КомандаПоиска.СтандартныеКомандыПодвала.Удалить(ИндексЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Элемент плана глобального поиска команды.
// 
// Параметры:
//  ИмяПроцедуры - Строка
//  Модуль - Строка
//  НаСервере - Булево
//  Фоновый - Булево
// 
// Возвращаемое значение:
//  Структура - Элемент плана глобального поиска команды:
// * ИмяПроцедуры - см. ЭлементПланаГлобальногоПоискаКоманды.ИмяПроцедуры
// * Модуль - см. ЭлементПланаГлобальногоПоискаКоманды.Модуль
// * НаСервере - см. ЭлементПланаГлобальногоПоискаКоманды.НаСервере
// * Фоновый - см. ЭлементПланаГлобальногоПоискаКоманды.Фоновый
Функция ЭлементПланаГлобальногоПоискаКоманды(ИмяПроцедуры, Модуль, НаСервере, Фоновый) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	Результат.Вставить("Модуль", Модуль);
	Результат.Вставить("НаСервере", НаСервере);
	Результат.Вставить("Фоновый", Фоновый);

	Возврат Результат;
	
КонецФункции

// Описание оповещения.
// 
// Параметры:
//  ДанныеОписания - Неопределено
//                 - ОписаниеОповещения
//                 - см. РГП_ГлобальныйПоискСервер.ОписаниеОповещения
// 
// Возвращаемое значение:
//  - ОписаниеОповещения
//  - Неопределено
Функция ОписаниеОповещения(Знач ДанныеОписания) Экспорт

	Если ТипЗнч(ДанныеОписания) = Тип("ОписаниеОповещения") Тогда

		ОписаниеОповещения = ДанныеОписания;

	ИначеЕсли РГП_ГлобальныйПоискКлиентСервер.ЗначениеСоответствуетШаблону(
		ДанныеОписания, РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения()) Тогда

		ДанныеОписания = ДанныеОписания; //см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения
		
		ОбщийМодульМетода = ОбщийМодуль(ДанныеОписания.Модуль);
		
		Если ЗначениеЗаполнено(ДанныеОписания.ИмяПроцедурыОбработкиОшибки) Тогда
			
			ОбщийМодульОбработкиОшибки = ОбщийМодуль(ДанныеОписания.МодульОбработкиОшибки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				ДанныеОписания.ИмяПроцедуры, ОбщийМодульМетода, ДанныеОписания.ДополнительныеПараметры, 
				ДанныеОписания.ИмяПроцедурыОбработкиОшибки, ОбщийМодульОбработкиОшибки);
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				ДанныеОписания.ИмяПроцедуры, ОбщийМодульМетода, ДанныеОписания.ДополнительныеПараметры);
			
		КонецЕсли;		

	Иначе

		ОписаниеОповещения = Неопределено;

	КонецЕсли;

	Возврат ОписаниеОповещения;

КонецФункции

// Добавить элемент результата стандартной команды возвращения на команду вверх
// 
// Параметры:
//  РезультатыПоиска - РезультатГлобальногоПоиска
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
Процедура ДобавитьЭлементРезультатаСтандартнойКоманды_Назад(РезультатыПоиска, ПараметрыВыполнения) Экспорт
	
	ПараметрыПоиска = ПараметрыРасширенногоГлобальногоПоиска();
	РодительскаяКоманда = ПараметрыПоиска.ПолныеКлючиКоманд.Получить(ПараметрыВыполнения.ПолныйКлюч).Родитель; //см. НоваяКомандаРасширенногоПоиска
	
	ВременныеПараметры  = РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска();
	ЗаполнитьЗначенияСвойств(ВременныеПараметры, ПараметрыВыполнения);
	
	ВременныеПараметры.ПолныйКлюч = РодительскаяКоманда.ПолныйКлюч;
	Если НЕ РодительскаяКоманда.ВозможныПараметры Тогда
		ВременныеПараметры.ПараметрыКоманды = Новый Массив;
	КонецЕсли;
	Если НЕ РодительскаяКоманда.ВозможнаСтрокаПоиска Тогда
		ВременныеПараметры.СтрокаПоиска = "";
	КонецЕсли;
	
	ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеПереходаНаКоманду(ВременныеПараметры);
	
	ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
		ВыполняемоеДействие, "Назад", БиблиотекаКартинок.Назад);
	РезультатыПоиска.Добавить(ЭлементРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеКоманд

// Заполняет стандартные команды расширенного глобального поиска
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
Процедура ЗаполнитьСтандартныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска)

	ОбщаяКоманда = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "\");
	ОбщаяКоманда.ВозможнаСтрокаПоиска = Ложь;

	ЗаполнитьКомандыПоискаМетаданныхРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда);

	ЗаполнитьКомандыПоискаПоФормамРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда);

	ЗаполнитьИнформационныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда);

КонецПроцедуры

// Заполняет команды поиска метаданных расширенного глобального поиска
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
//  ОбщаяКоманда - см. НоваяКомандаРасширенногоПоиска
Процедура ЗаполнитьКомандыПоискаМетаданныхРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда)

	ЭлементПланаПоиска = ЭлементПланаГлобальногоПоискаКоманды(
		"ГлобальныйПоискМетаданные", "РГП_ГлобальныйПоискСервер", Истина, Ложь);

	КомандаПоискаМетаданных = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "М", ОбщаяКоманда);
	КомандаПоискаМетаданных.Представление = "Поиск по метаданным";
	КомандаПоискаМетаданных.Описание = "Поиск по именам, синонимам, представлениям и подсказкам";
	КомандаПоискаМетаданных.Картинка = БиблиотекаКартинок.ПоискДанных;
	КомандаПоискаМетаданных.ПланПоиска.Добавить(ЭлементПланаПоиска);
	
	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Все", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Все";
	КомандаПоиска.Описание = "Поиск по всем объектам метаданных";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПоискДанных;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Спр", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Справочники";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Справочник;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Док", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Документы";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Документ;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ЖД", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Журналы документов";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ЖурналДокументов;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Отч", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Отчеты";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Отчет;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Обр", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Обработки";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Обработка;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "РС", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Регистры сведений";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РегистрСведений;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "РН", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Регистры накопления";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РегистрНакопления;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "РБ", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Регистры бухгалтерии";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "БП", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Бизнес процессы";
	КомандаПоиска.Картинка = БиблиотекаКартинок.БизнесПроцесс;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Здч", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Задачи";
	КомандаПоиска.Картинка = БиблиотекаКартинок.Задача;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПВР", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы видов расчета";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланВидовРасчета;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПВХ", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы видов характеристик";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланВидовХарактеристик;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПО", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы обмена";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланОбмена;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "ПС", КомандаПоискаМетаданных);
	КомандаПоиска.Представление = "Планы счетов";
	КомандаПоиска.Картинка = БиблиотекаКартинок.ПланСчетов;
	КомандаПоиска.ПланПоиска.Добавить(ЭлементПланаПоиска);

КонецПроцедуры

// Заполняет команды поиска по формам
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
//  ОбщаяКоманда - см. НоваяКомандаРасширенногоПоиска
Процедура ЗаполнитьКомандыПоискаПоФормамРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда)

	ЭлементПланаПоискаФорм = ЭлементПланаГлобальногоПоискаКоманды(
		"ГлобальныйПоискПоОткрытымОкнам", "РГП_ГлобальныйПоискКлиент", Ложь, Ложь);
	
	ЭлементПланаПоискаЭлементов = ЭлементПланаГлобальногоПоискаКоманды(
		"ГлобальныйПоискПоЭлементамФормы", "РГП_ГлобальныйПоискКлиент", Ложь, Ложь);
	
	ОсновнаяКоманда = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Формы", ОбщаяКоманда);
	ОсновнаяКоманда.Представление = "Поиск по формам";
	ОсновнаяКоманда.Картинка = БиблиотекаКартинок.Форма;
	ОсновнаяКоманда.ПланПоиска.Добавить(ЭлементПланаПоискаФорм);
	
	КомандаЭлементы = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Э", ОсновнаяКоманда);
	КомандаЭлементы.Представление = "Элементы";
	КомандаЭлементы.Картинка = БиблиотекаКартинок.ПоказатьДанные;
	КомандаЭлементы.ВозможныПараметры = Истина;
	КомандаЭлементы.ОтображатьВМеню = Ложь;
	КомандаЭлементы.ПланПоиска.Добавить(ЭлементПланаПоискаЭлементов);

КонецПроцедуры

// Заполняет информационные команды расширенного глобального поиска
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыРасширенногоГлобальногоПоиска
//  ОбщаяКоманда - см. НоваяКомандаРасширенногоПоиска
Процедура ЗаполнитьИнформационныеКомандыРасширенногоГлобальногоПоиска(ПараметрыПоиска, ОбщаяКоманда)

	СтандартныеКоманды = РГП_ГлобальныйПоискКлиентСервер.СтандартныеКоманды();

	ИнформационнаяКоманда = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "Инфо", ОбщаяКоманда);
	ИнформационнаяКоманда.ВозможнаСтрокаПоиска = Ложь;
	ИнформационнаяКоманда.Представление = "О расширении глобального поиска";
	ИнформационнаяКоманда.Картинка = БиблиотекаКартинок.Информация;
	ИсключитьСтандартнуюКомандуИзКомандыПоиска(ИнформационнаяКоманда, СтандартныеКоманды.ВводСтроки);
	ИсключитьСтандартнуюКомандуИзКомандыПоиска(ИнформационнаяКоманда, СтандартныеКоманды.Обновить);

	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "github", ИнформационнаяКоманда);
	КомандаПоиска.Представление = "Открыть репозиторий";
	КомандаПоиска.Картинка = БиблиотекаКартинок.РГП_GitHub;
	КомандаПоиска.ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОткрытияЗначения(
		ПараметрыПоиска.ОписаниеРасширения.Репозиторий);
		
	КомандаПоиска = НоваяКомандаРасширенногоПоиска(ПараметрыПоиска, "версия", ИнформационнаяКоманда);
	КомандаПоиска.Представление = "Текущая версия: " + ПараметрыПоиска.ОписаниеРасширения.Версия;
	КомандаПоиска.Картинка = БиблиотекаКартинок.Информация;
	КомандаПоиска.ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОткрытияЗначения(Неопределено);

КонецПроцедуры

#КонецОбласти

#Область ОписанияТипов

// Упорядоченная коллекция команд расширенного глобального поиска.
// Нужна для правильного порядка вывода команд пользователю
// 
// Возвращаемое значение:
//  Массив из см. НоваяКомандаРасширенногоПоиска
Функция УпорядоченнаяКоллекцияКомандРасширенногоГлобальногоПоиска()

	Возврат Новый Массив;

КонецФункции

// Описание расширения.
// 
// Возвращаемое значение:
//  Структура -  Описание расширения:
// * Версия - Строка - Номер версии расширения
// * Репозиторий - Строка - Адрес репозитория
Функция ОписаниеРасширения()
	
	Результат = Новый Структура;
	Результат.Вставить("Версия", "");
	Результат.Вставить("Репозиторий", "");
	
	Возврат Результат;
	
КонецФункции

// Иерархическая коллекция команд параметров расширенного глобального поиска.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - см. НоваяКомандаРасширенногоПоиска
Функция КоллекцияКомандПараметровРасширенногоГлобальногоПоиска()

	Возврат Новый Соответствие;

КонецФункции

// Коллекция всех команд по полному ключу
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
// * Ключ - Строка
// * Значение - см. НоваяКомандаРасширенногоПоиска
Функция КоллекцияВсехКомандПараметровРасширенногоГлобальногоПоиска()

	Возврат Новый Соответствие;

КонецФункции

#КонецОбласти

#Область ГлобальныйПоискПоОткрытымФормам

// Общие параметры выполнения глобального поиска по открытым окнам.
// 
// Параметры:
//  СтрокаПоиска - см. ГлобальныйПоискПоОткрытымОкнам.СтрокаПоиска
//  РезультатыПоиска - см. ГлобальныйПоискПоОткрытымОкнам.РезультатыПоиска
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
// 
// Возвращаемое значение:
//  Структура - Общие параметры выполнения глобального поиска по открытым окнам:
// * ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
// * ВыводВсехДанных - Булево - Выводить ли все окна или искать среди них
// * КартинкаФорма - Картинка - Картинка для форм
// * КартинкаЗакрыть - Картинка - Картинка для команды закрытия
// * КартинкаОткрыть - Картинка - Картинка для команды открытия
// * КартинкаДанные - Картинка - Картинка для команды инспектирования
// * КартинкаОбновить - Картинка - Картинка для команды обновления
// * ОповещениеОткрытие - см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения
// * ОповещениеЗакрытие - см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения
// * РезультатыПоиска - см. ГлобальныйПоискПоОткрытымОкнам.РезультатыПоиска
Функция ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымФормам(СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения)
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	ОбщиеПараметры.Вставить("ВыводВсехДанных"    , НЕ ЗначениеЗаполнено(ПараметрыВыполнения.СловаПоиска));
	
	ОбщиеПараметры.Вставить("КартинкаФорма"    , БиблиотекаКартинок.Форма);
	ОбщиеПараметры.Вставить("КартинкаЗакрыть"  , БиблиотекаКартинок.Закрыть);
	ОбщиеПараметры.Вставить("КартинкаОткрыть"  , БиблиотекаКартинок.ПолеВводаОткрыть);
	ОбщиеПараметры.Вставить("КартинкаДанные"   , БиблиотекаКартинок.ПоказатьДанные);
	ОбщиеПараметры.Вставить("КартинкаОбновить" , БиблиотекаКартинок.Обновить);
	
	ОбщиеПараметры.Вставить("ОповещениеОткрытие", 
		РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения("АктивироватьФорму", ЭтотОбъект));
	ОбщиеПараметры.Вставить("ОповещениеЗакрытие", 
		РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект));
	
	ОбщиеПараметры.Вставить("РезультатыПоиска", РезультатыПоиска);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

// Глобальный поиск по открытым окнам - вывести открытые формы.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымФормам
Процедура ГлобальныйПоискПоОткрытымФормам_ВывестиОткрытыеФормы(ОбщиеПараметры)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	
	ОткрытыеОкна = ПолучитьОкна();
	Для Каждого Окно Из ОткрытыеОкна Цикл
		
		Для Каждого Форма Из Окно.Содержимое Цикл

			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
				
				ФормаПодходит = ОбщиеПараметры.ВыводВсехДанных;
				
				Для Каждого СловоПоиска Из ПараметрыВыполнения.СловаПоиска Цикл

					Если ФормаПодходит Тогда
						Прервать;
					КонецЕсли;

					Если СтрНайти(ВРег(Форма.Заголовок), СловоПоиска) > 0 
						ИЛИ СтрНайти(ВРег(Окно.Заголовок), СловоПоиска) > 0
						ИЛИ СтрНайти(ВРег(Форма.ИмяФормы), СловоПоиска) > 0 Тогда
						ФормаПодходит = Истина;
					КонецЕсли;

				КонецЦикла;

				Если ФормаПодходит Тогда
					
					ПредставлениеРезультата = ?(ПустаяСтрока(Форма.Заголовок), Окно.Заголовок, Форма.Заголовок);
					ГлобальныйПоискПоОткрытымФормам_ДобавитьРезультат(ОбщиеПараметры, Форма, ПредставлениеРезультата);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск по открытым окнам добавить результат.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияГлобальногоПоискаПоОткрытымФормам
//  Форма - ФормаКлиентскогоПриложения
//  ПредставлениеРезультата - Строка
Процедура ГлобальныйПоискПоОткрытымФормам_ДобавитьРезультат(ОбщиеПараметры, Форма, ПредставлениеРезультата)
	
	ДействиеОткрытие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОписанияОповещения(ОбщиеПараметры.ОповещениеОткрытие);
	ДействиеОткрытие.ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ДействиеЗакрытие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОписанияОповещения(ОбщиеПараметры.ОповещениеЗакрытие);
	ДействиеЗакрытие.ДополнительныеПараметры.Вставить("Форма", Форма);
	РГП_ГлобальныйПоискКлиентСервер.УстановитьПутьПерехода(ДействиеЗакрытие, ОбщиеПараметры.ПараметрыВыполнения); //Обновляем
	
	ДействиеЭлементы = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеПереходаНаКоманду(
		ОбщиеПараметры.ПараметрыВыполнения, "Э", Форма.УникальныйИдентификатор);
	
	ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
		ДействиеОткрытие, ПредставлениеРезультата, ОбщиеПараметры.КартинкаФорма);
	ЭлементРезультата.Действия.Добавить(ДействиеОткрытие, "Открыть", ОбщиеПараметры.КартинкаОткрыть);
	ЭлементРезультата.Действия.Добавить(ДействиеЗакрытие, "Закрыть", ОбщиеПараметры.КартинкаЗакрыть);
	ЭлементРезультата.Действия.Добавить(ДействиеЭлементы, "Элементы", ОбщиеПараметры.КартинкаДанные);

	ОбщиеПараметры.РезультатыПоиска.Добавить(ЭлементРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ГлобальныйПоискПоЭлементамФормы

// Общие параметры выполнения глобального поиска по открытым окнам.
// 
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
// 
// Возвращаемое значение:
//  Структура - Общие параметры выполнения глобального поиска по открытым окнам:
// * ПараметрыВыполнения - см. ПараметрыВыполненияКомандыПоиска
// * Форма - Неопределено - Форма не найдена, поиск выполняться не будет
//         - ФормаКлиентскогоПриложения - Форма элементы которой необходимо искать
// * ПриоритетыЭлементов - СписокЗначений из Число
// * Картинка - Картинка - Общая картинка для всех действий
// * ВыводВсехЭлементов - Булево - Выводить все элементы, если пустая строка поиска
// * ОписаниеАктивация - см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения
// * ОписаниеВыделения - см. РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения
Функция ОбщиеПараметрыВыполненияПоискаПоЭлементамФормы(ПараметрыВыполнения)
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	ОбщиеПараметры.Вставить("Форма", ФормаПоУникальномуИдентификатору(ПараметрыВыполнения.ПараметрыКоманды[0]));
	ОбщиеПараметры.Вставить("ПриоритетыЭлементов", Новый СписокЗначений); //СписокЗначений из Число
	ОбщиеПараметры.Вставить("Картинка", БиблиотекаКартинок.ПолеВводаОткрыть);
	ОбщиеПараметры.Вставить("ВыводВсехЭлементов", ПустаяСтрока(ПараметрыВыполнения.СтрокаПоиска));
	ОбщиеПараметры.Вставить("ОписаниеАктивация", РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения("АктивироватьЭлементФормы", ЭтотОбъект));
	ОбщиеПараметры.Вставить("ОписаниеВыделения", РГП_ГлобальныйПоискКлиентСервер.ОписаниеОповещения("ВыделитьЭлементФормы", ЭтотОбъект));
	
	Возврат ОбщиеПараметры;
	
КонецФункции

// Глобальный поиск по открытым окнам - вывести открытые формы.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияПоискаПоЭлементамФормы
Процедура ГлобальныйПоискПоЭлементамФормы_НайтиПодходящиеЭлементы(ОбщиеПараметры)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	ПриоритетыЭлементов = ОбщиеПараметры.ПриоритетыЭлементов;
	СтрокаПоиска = ПараметрыВыполнения.СтрокаПоискаВрег;
	СловаПоиска  = ПараметрыВыполнения.СловаПоиска;
	
	Для Каждого ЭлементФормы Из ОбщиеПараметры.Форма.Элементы Цикл
		
		ПолучаемыеСвойства = Новый Структура("Видимость, Имя, Заголовок", Ложь, "", "");
		
		Попытка
			ЗаполнитьЗначенияСвойств(ПолучаемыеСвойства, ЭлементФормы);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если НЕ ПолучаемыеСвойства.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		ПриоритетЭлемента = 0;
		ИмяЭлементаВрег   = ВРег(ПолучаемыеСвойства.Имя);
		ЗаголовокВрег     = ВРег(ПолучаемыеСвойства.Заголовок);

		Если ИмяЭлементаВрег = СтрокаПоиска Или ЗаголовокВрег = СтрокаПоиска Тогда
			ПриоритетЭлемента = ПараметрыВыполнения.МаксимальныйПриоритет;
		ИначеЕсли СтрНачинаетсяС(ИмяЭлементаВрег, СтрокаПоиска) Или СтрНачинаетсяС(ЗаголовокВрег, СтрокаПоиска) Тогда
			ПриоритетЭлемента = ПараметрыВыполнения.МаксимальныйПриоритет - 1;
		Иначе
			Для Каждого СловоПоиска Из СловаПоиска Цикл
				ПриоритетЭлемента = ПриоритетЭлемента + СтрЧислоВхождений(ИмяЭлементаВрег, СловоПоиска);
				ПриоритетЭлемента = ПриоритетЭлемента + СтрЧислоВхождений(ЗаголовокВрег, СловоПоиска);
			КонецЦикла;
		КонецЕсли;
	
		Если ПриоритетЭлемента > 0 Тогда
			ПриоритетыЭлементов.Добавить(ПриоритетЭлемента, ЭлементФормы.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск по открытым окнам добавить результат.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияПоискаПоЭлементамФормы
//  РезультатыПоиска - РезультатГлобальногоПоиска
Процедура ГлобальныйПоискПоЭлементамФормы_ДобавитьРезультаты(ОбщиеПараметры, РезультатыПоиска)
	
	Форма = ОбщиеПараметры.Форма;
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	
	КоллекцияЭлементов  = Неопределено;//ВсеЭлементыФормы,СписокЗначений
	Если ОбщиеПараметры.ВыводВсехЭлементов Тогда
		КоллекцияЭлементов = Форма.Элементы;
	Иначе
		КоллекцияЭлементов = ОбщиеПараметры.ПриоритетыЭлементов; 
		КоллекцияЭлементов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЭлементСпискаЗначений") Тогда
			ЭлементФормы = Форма.Элементы.Найти(ЭлементКоллекции.Представление);
		Иначе
			ЭлементФормы = ЭлементКоллекции;
		КонецЕсли;
		
		ГлобальныйПоискПоЭлементамФормы_ДобавитьРезультат(ОбщиеПараметры, РезультатыПоиска, ЭлементФормы);
		
		Если РезультатыПоиска.Количество() = ПараметрыВыполнения.ЛимитСтрокРезультата Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск по элементам формы добавить результат.
// 
// Параметры:
//  ОбщиеПараметры - см. ОбщиеПараметрыВыполненияПоискаПоЭлементамФормы
//  РезультатыПоиска - РезультатГлобальногоПоиска - Результаты поиска
//  ЭлементФормы - ЭлементСпискаЗначений, ТаблицаФормы, ДекорацияФормы, КнопкаФормы, ГруппаФормы, ПолеФормы - Элемент формы
Процедура ГлобальныйПоискПоЭлементамФормы_ДобавитьРезультат(ОбщиеПараметры, РезультатыПоиска, ЭлементФормы)
	
	Представление = ?(ПустаяСтрока(ЭлементФормы.Заголовок), ЭлементФормы.Имя, ЭлементФормы.Заголовок);
	Представление = СтрШаблон("%1: %2", ТипЗнч(ЭлементФормы), Представление);

	ДействиеАктивация = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОписанияОповещения(ОбщиеПараметры.ОписаниеАктивация);
	ДействиеАктивация.ДополнительныеПараметры.Вставить("Форма", ОбщиеПараметры.Форма);
	ДействиеАктивация.ДополнительныеПараметры.Вставить("Элемент", ЭлементФормы);

	ДействиеВыделение = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОписанияОповещения(ОбщиеПараметры.ОписаниеВыделения);
	ДействиеВыделение.ДополнительныеПараметры.Вставить("Форма", ОбщиеПараметры.Форма);
	ДействиеВыделение.ДополнительныеПараметры.Вставить("Элемент", ЭлементФормы);

	ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
			ДействиеАктивация, Представление, ОбщиеПараметры.Картинка);

	ЭлементРезультата.Действия.Добавить(ДействиеАктивация, "Активировать", ОбщиеПараметры.Картинка);
	ЭлементРезультата.Действия.Добавить(ДействиеВыделение, "Выделить", ОбщиеПараметры.Картинка);

	РезультатыПоиска.Добавить(ЭлементРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

// Форма по уникальному идентификатору.
// 
// Параметры:
//  ИдентификаторФормы - Строка, УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//  Неопределено, ФормаКлиентскогоПриложения -
Функция ФормаПоУникальномуИдентификатору(ИдентификаторФормы)
	
	Попытка
		ИдентификаторФормы = Новый УникальныйИдентификатор(ИдентификаторФормы);
	Исключение
		Возврат Неопределено;//Это не УИД;
	КонецПопытки;
	
	Для Каждого Окно Из ПолучитьОкна() Цикл

		Для Каждого Форма Из Окно.Содержимое Цикл //ФормаКлиентскогоПриложения

			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") 
				И Форма.УникальныйИдентификатор = ИдентификаторФормы Тогда
				Возврат Форма;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Общий модуль.
// 
// Параметры:
//  ИмяИлиМодуль - ОбщийМодуль, Строка - Имя или модуль
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция ОбщийМодуль(ИмяИлиМодуль)

	Если ТипЗнч(ИмяИлиМодуль) = Тип("Строка") Тогда
		ВременнаяСтруктура = Новый Структура;
		ВременнаяСтруктура.Вставить(ИмяИлиМодуль); //Проверка на корректную строку
		Возврат Вычислить(ИмяИлиМодуль); //ОбщийМодуль
	Иначе
		Возврат ИмяИлиМодуль;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
