// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Значение соответствует шаблону.
// 
// Параметры:
//  Значение - Произвольный
//           - Структура из КлючИЗначение:
//           * Ключ - Строка
//  Шаблон - Произвольный
//           - Структура из КлючИЗначение:
//           * Ключ - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЗначениеСоответствуетШаблону(Значение, Шаблон) Экспорт
	
	Соответствует = Истина;
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения <> ТипЗнч(Шаблон) Тогда
		
		Соответствует = Ложь;
		
	ИначеЕсли ТипЗначения = Тип("Структура") Тогда
		
		Если Шаблон.Количество() <> Значение.Количество() Тогда
			Соответствует = Ложь;
		Иначе
			Для Каждого КлючИЗначение Из Шаблон Цикл
				Если НЕ Значение.Свойство(КлючИЗначение.Ключ) Тогда
					Соответствует = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

// Описание оповещения.
// 
// Параметры:
//  ИмяПроцедуры - Строка, Неопределено - Имя экспортируемой процедуры модуля, которая будет вызвана.
//  Модуль - ОбщийМодуль, Строка - Программный модуль, процедура которого будет вызвана
//  ДополнительныеПараметры - Неопределено, Произвольный - Значение любого типа, которое при вызове будет передано в указанную процедуру последним параметром.
//  ИмяПроцедурыОбработкиОшибки - Строка - Имя экспортируемой процедуры модуля, которая будет вызвана в случае возникновения ошибки.
//  МодульОбработкиОшибки - ОбщийМодуль, Строка, Неопределено - Программный модуль, процедура которого будет вызвана в случае возникновения ошибки. При использовании типа ФормаКлиентскогоПриложения будет вызван метод модуля указанной формы клиентского приложения. При использовании типа КомандаКомандногоИнтерфейса будет вызван метод модуля команды командного интерфейса. При использовании типа ОбщийМодуль будет вызван метод общего неглобального модуля.
// 
// Возвращаемое значение:
//  Структура - Описание оповещения:
// * ИмяПроцедуры - см. ОписаниеОповещения.ИмяПроцедуры
// * Модуль - см. ОписаниеОповещения.Модуль
// * ДополнительныеПараметры - см. ОписаниеОповещения.ДополнительныеПараметры
// * ИмяПроцедурыОбработкиОшибки - см. ОписаниеОповещения.ИмяПроцедурыОбработкиОшибки
// * МодульОбработкиОшибки - см. ОписаниеОповещения.МодульОбработкиОшибки
Функция ОписаниеОповещения(ИмяПроцедуры = "", Модуль = "", ДополнительныеПараметры = Неопределено, 
	ИмяПроцедурыОбработкиОшибки = "", МодульОбработкиОшибки = "") Экспорт //@skip-check method-too-many-params
	
	ОписаниеОповещения = Новый Структура;
	ОписаниеОповещения.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	ОписаниеОповещения.Вставить("Модуль", Модуль);
	ОписаниеОповещения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ОписаниеОповещения.Вставить("ИмяПроцедурыОбработкиОшибки", ИмяПроцедурыОбработкиОшибки);
	ОписаниеОповещения.Вставить("МодульОбработкиОшибки", МодульОбработкиОшибки);
	
	//@skip-check constructor-function-return-section - баг ЕДТ
	Возврат ОписаниеОповещения;
	
КонецФункции

// Выполняемое действие. Может использоваться в команде и в результате поиска
// 
// Возвращаемое значение:
//  Структура:
// * ОткрываемоеЗначение - Неопределено, Произвольный - Значение, которое необходимо открыть
// * ПутьПерехода - Строка - Полный путь перехода по глобальному поиску
// * ОткрываемаяФорма - Неопределено
//                    - см. ОписаниеОткрываемойФормы
// * ОписаниеОповещения - Неопределено
//                      - см. ОписаниеОповещения
// * ДополнительныеПараметры - Структура из КлючИЗначение - :
// ** Ключ - Строка
// ** Значение - Произвольный
Функция ВыполняемоеДействие() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ОткрываемоеЗначение", Неопределено);	
	Результат.Вставить("ПутьПерехода", "");
	Результат.Вставить("ОписаниеОповещения", Неопределено);
	Результат.Вставить("ОткрываемаяФорма", Неопределено);
	Результат.Вставить("ДополнительныеПараметры", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

// Выполняемое действие открытия формы.
// 
// Параметры:
//  ИмяФормы - Строка - Имя открываемой формы
//  ПараметрыФормы - Структура, Неопределено - Параметры формы
// 
// Возвращаемое значение:
//  см. ВыполняемоеДействие

// Описание открываемой формы.
// 
// Параметры:
//  ИмяФормы - Строка - Имя открываемой формы
//  Параметры - Структура, Неопределено - Параметры формы
// 
// Возвращаемое значение:
//  Структура - Описание открываемой формы:
// * ИмяФормы - Строка
// * Параметры - Структура, Неопределено -
// * Владелец - Неопределено, Произвольный - см. метод платформы ОткрытьФорму.Владелец
// * Уникальность - Неопределено, Произвольный - см. метод платформы ОткрытьФорму.Уникальность
// * Окно - Неопределено, Произвольный - см. метод платформы ОткрытьФорму.Окно
// * НавигационнаяСсылка - Неопределено, Произвольный - см. метод платформы ОткрытьФорму.НавигационнаяСсылка
// * ОписаниеОповещенияОЗакрытии - Неопределено, Произвольный - см. метод платформы ОткрытьФорму.ОписаниеОповещенияОЗакрытии
// * РежимОткрытияОкна - Неопределено, Произвольный - см. метод платформы ОткрытьФорму.РежимОткрытияОкна
Функция ОписаниеОткрываемойФормы(ИмяФормы, Параметры = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Результат.Вставить("Параметры", Параметры);
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("Уникальность", Неопределено);
	Результат.Вставить("Окно", Неопределено);
	Результат.Вставить("НавигационнаяСсылка", Неопределено);
	Результат.Вставить("ОписаниеОповещенияОЗакрытии", Неопределено);
	Результат.Вставить("РежимОткрытияОкна", Неопределено);

	Возврат Результат;
	
КонецФункции

// Выполняемое действие открытия формы.
// 
// Параметры:
//  ИмяФормы - Строка - Имя открываемой формы
//  ПараметрыФормы - Структура, Неопределено - Параметры формы
// 
// Возвращаемое значение:
//  см. ВыполняемоеДействие
Функция ВыполняемоеДействиеОткрытияФормы(ИмяФормы, ПараметрыФормы = Неопределено) Экспорт
	
	Результат = ВыполняемоеДействие();
	Результат.ОткрываемаяФорма = ОписаниеОткрываемойФормы(ИмяФормы, ПараметрыФормы);
	Возврат Результат;
	
КонецФункции

// Выполняемое действие открытия значения.
// 
// Параметры:
//  ОткрываемоеЗначение - Произвольный
// 
// Возвращаемое значение:
//  см. ВыполняемоеДействие
Функция ВыполняемоеДействиеОткрытияЗначения(ОткрываемоеЗначение) Экспорт
	
	Результат = ВыполняемоеДействие();
	Результат.ОткрываемоеЗначение = ОткрываемоеЗначение;
	
	Возврат Результат;
	
КонецФункции

// Выполняемое действие выполнения описания оповещения
// 
// Параметры:
//  ОписаниеОповещения - см. ОписаниеОповещения
// 
// Возвращаемое значение:
//  см. ВыполняемоеДействие
Функция ВыполняемоеДействиеОписанияОповещения(ОписаниеОповещения) Экспорт
	
	Результат = ВыполняемоеДействие();
	Результат.ОписаниеОповещения = ОписаниеОповещения;
	
	Возврат Результат;
	
КонецФункции

// Выполняемое действие выполнения описания оповещения
// 
// Параметры:
//  ВыполняемоеДействие - см. УстановитьПутьПерехода.ВыполняемоеДействие
//  ПараметрыВыполнения - см. УстановитьПутьПерехода.ПараметрыВыполнения
//  КлючКоманды - см. УстановитьПутьПерехода.КлючКоманды
//  ПередаваемыеПараметры - см. УстановитьПутьПерехода.ПередаваемыеПараметры
// 
// Возвращаемое значение:
//  см. ВыполняемоеДействие
Функция ВыполняемоеДействиеПереходаНаКоманду(ПараметрыВыполнения, КлючКоманды = "", ПередаваемыеПараметры = Неопределено) Экспорт
	
	Результат = ВыполняемоеДействие();
	УстановитьПутьПерехода(Результат, ПараметрыВыполнения, КлючКоманды, ПередаваемыеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Заполнить путь перехода в данных результата.
// 
// Параметры:
//  ВыполняемоеДействие - см. ВыполняемоеДействие
//  ПараметрыВыполнения - Неопределено - Параметры выполнения команды, на которую нужно перейти
//  					- см. ШаблонПараметровВыполненияКомандыПоиска
//  КлючКоманды - Строка - Ключ подчиненной команды
//  ПередаваемыеПараметры - Массив из Произвольный
//  				 - Произвольный
//  				 - Неопределено
// 
Процедура УстановитьПутьПерехода(ВыполняемоеДействие, ПараметрыВыполнения, 
	КлючКоманды = "", ПередаваемыеПараметры = Неопределено) Экспорт
		
	ЧастиСтроки = Новый Массив; //Массив из Строка
	
	Если ЗначениеЗаполнено(КлючКоманды) Тогда
		ЧастиСтроки.Добавить(КлючКоманды);
	КонецЕсли;
	
	Для Каждого ПараметрКоманды Из ПараметрыВыполнения.ПараметрыКоманды Цикл
		ЧастиСтроки.Добавить(ПараметрКоманды);
	КонецЦикла;
	
	Если ТипЗнч(ПередаваемыеПараметры) = Тип("Массив") Тогда
		Для Каждого ПараметрКоманды Из ПередаваемыеПараметры Цикл
			ЧастиСтроки.Добавить(Строка(ПараметрКоманды));
		КонецЦикла;
	ИначеЕсли ПередаваемыеПараметры <> Неопределено Тогда
		ЧастиСтроки.Добавить(Строка(ПередаваемыеПараметры));
	КонецЕсли;
	
	ЧастиСтроки.Добавить(ПараметрыВыполнения.СтрокаПоиска);
	
	ВыполняемоеДействие.ПутьПерехода = ПараметрыВыполнения.ПолныйКлюч 
		+ СтрСоединить(ЧастиСтроки, ПараметрыВыполнения.Разделитель);
	
КонецПроцедуры

// Пустые параметры выполнения команды. 
// Заполняется в клиенстком модуле и передается в план поиска
// 
// Возвращаемое значение:
//  Структура - :
// * Ключ - Строка - Ключ команды
// * ПолныйКлюч - Строка - Полный ключ команды
// * Разделитель - Строка - Разделитель команд
// * ВозможныПараметры - Булево - 
// * ПараметрыКоманды - Массив из Строка - Параметры, переданные после имени команды с использованием разделителя
// * ПолныйКлючСКомандами - Строка - Полный ключ команды, включая параметры
// * СтрокаПоиска - Строка - Строка поиска с вырезанным ключем команды
// * СтрокаПоискаВрег - Строка - СтрокаПоиска в верхнем регистре
// * СловаПоиска - Массив из Строка - СтрокаПоискаВрег разбитая на слова
// * МаксимальныйПриоритет - Число - Максимальный приоритет, устанавливаемый для идеального совпадения по строке поиска
// * ЛимитСтрокРезультата - Число - Максимальное число выводимых строк результата
// * ДополнительныеПараметры - Структура из КлючИЗначение:
// ** Ключ - Строка
// ** Значение - Произвольный
Функция ШаблонПараметровВыполненияКомандыПоиска() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ключ", "");
	Результат.Вставить("ПолныйКлюч", "");
	Результат.Вставить("Разделитель", "");
	Результат.Вставить("ВозможныПараметры", Ложь);
	Результат.Вставить("ПараметрыКоманды", Новый Массив);
	Результат.Вставить("ПолныйКлючСКомандами", "");
	Результат.Вставить("СтрокаПоиска", "");
	Результат.Вставить("СтрокаПоискаВрег", "");
	Результат.Вставить("СловаПоиска", Новый Массив);
	Результат.Вставить("МаксимальныйПриоритет", 999);
	Результат.Вставить("ЛимитСтрокРезультата", 0);
	Результат.Вставить("ДополнительныеПараметры", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

// Ключ вида расширенного глобального поиска. 
// По нему определяем, что при нажатии нужно выполнять свою логику
// 
// Возвращаемое значение:
//  Строка
Функция КлючВидаРасширенногоГлобальногоПоиска() Экспорт
	
	Возврат "РГП_РасширенныйГлобальныйПоиск";
	
КонецФункции

// Необходимо ли переданный ЭлементРезультата обрабатывать методами расширения
// 
// Параметры:
//  ЭлементРезультата - ЭлементРезультатаГлобальногоПоиска
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЭлементРезультатаРасширенногоГлобальногоПоиска(ЭлементРезультата) Экспорт
	
	Возврат ЭлементРезультата.ВидПоиска = КлючВидаРасширенногоГлобальногоПоиска();
	
КонецФункции

// Добавляет элемент результата глобального поиска.
// 
// Параметры:
//  РезультатыПоиска - РезультатГлобальногоПоиска
//  ВыполняемоеДействие - Произвольный
//                      - см. ВыполняемоеДействие
//  Представление - Строка - Представление
//  Картинка - Неопределено, Картинка - Картинка
//  Описание - Строка - Описание
//@skip-check method-too-many-params
Процедура ДобавитьЭлементРезультатаГлобальногоПоиска(РезультатыПоиска, 
	ВыполняемоеДействие = Неопределено, Представление = "", 
	Картинка = Неопределено, Описание = "") Экспорт
	
	РезультатыПоиска.Добавить(
		Новый ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие, 
			Представление, Картинка, КлючВидаРасширенногоГлобальногоПоиска(), Описание));
	
КонецПроцедуры

// Новый элемент результата глобального поиска.
// 
// Параметры:
//  ВыполняемоеДействие - Произвольный
//                      - см. ВыполняемоеДействие
//  Представление - Строка - Представление
//  Картинка - Неопределено, Картинка - Картинка
//  Описание - Строка - Описание
// 
// Возвращаемое значение:
//  ЭлементРезультатаГлобальногоПоиска
//@skip-check method-too-many-params
Функция ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие = Неопределено, 
	Представление = "", Картинка = Неопределено, Описание = "") Экспорт
	
	Возврат Новый ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие, 
		Представление, Картинка, КлючВидаРасширенногоГлобальногоПоиска(), Описание);
	
КонецФункции

// Добавить элемент результата стандартной команды ввода строки
// 
// Параметры:
//  РезультатыПоиска - РезультатГлобальногоПоиска
//  ПараметрыВыполнения - см. ШаблонПараметровВыполненияКомандыПоиска
Процедура ДобавитьЭлементРезультатаСтандартнойКоманды_ВводСтроки(РезультатыПоиска, ПараметрыВыполнения) Экспорт
	
	Элемент = ЭлементРезультатаКомандаВводаСтроки(ПараметрыВыполнения.ПолныйКлючСКомандами, ПараметрыВыполнения.СтрокаПоиска);
	РезультатыПоиска.Добавить(Элемент);
	
КонецПроцедуры

// Добавить элемент результата стандартной команды обновления результатов поиска
// 
// Параметры:
//  РезультатыПоиска - РезультатГлобальногоПоиска
//  ПараметрыВыполнения - см. ШаблонПараметровВыполненияКомандыПоиска
Процедура ДобавитьЭлементРезультатаСтандартнойКоманды_Обновить(РезультатыПоиска, ПараметрыВыполнения) Экспорт
	
	ВыполняемоеДействие = ВыполняемоеДействие();
	УстановитьПутьПерехода(ВыполняемоеДействие, ПараметрыВыполнения);
	ЭлементРезультата = ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие, "Обновить", БиблиотекаКартинок.Обновить);
	РезультатыПоиска.Добавить(ЭлементРезультата);
	
КонецПроцедуры

// Элемент результата команда ввода строки в конце поля поиска.
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка поиска, в конце которой будет подставлена введенная строка
//  НачальнаяСтрока - Строка - Начальное значение строки, которое будет использовано в качестве начального значения в окне ввода.
//  Представление - Строка - Представление в заголовке поля ввода
// 
// Возвращаемое значение:
//  ЭлементРезультатаГлобальногоПоиска
Функция ЭлементРезультатаКомандаВводаСтроки(СтрокаПоиска, НачальнаяСтрока = "", Знач Представление = "") Экспорт
	
	Если ПустаяСтрока(Представление) Тогда
		Если ПустаяСтрока(НачальнаяСтрока) Тогда
			Представление = "Введите строку для поиска";
		Иначе
			Представление = СтрШаблон("Строка поиска: %1", НачальнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыМетода = ПараметрыДействияВводаСтроки(СтрокаПоиска, НачальнаяСтрока, Представление);
	
	ВыполняемоеДействие = ВыполняемоеДействие();
	ВыполняемоеДействие.ОписаниеОповещения = ОписаниеОповещения(
		"ОтобразитьВводСтроки", "РГП_ГлобальныйПоискКлиент", ПараметрыМетода);
	
	Возврат ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие, Представление, БиблиотекаКартинок.ПоискДанных);
	
КонецФункции

// Параметры действия ввода строки.
// 
// Параметры:
//  СтрокаПоиска - см. ЭлементРезультатаКомандаВводаСтроки.СтрокаПоиска
//  НачальнаяСтрока - см. ЭлементРезультатаКомандаВводаСтроки.НачальнаяСтрока
//  Представление - см. ЭлементРезультатаКомандаВводаСтроки.Представление
// 
// Возвращаемое значение:
//  Структура - Параметры действия ввода строки:
//  * СтрокаПоиска - см. ЭлементРезультатаКомандаВводаСтроки.СтрокаПоиска
//  * НачальнаяСтрока - см. ЭлементРезультатаКомандаВводаСтроки.НачальнаяСтрока
//  * Представление - см. ЭлементРезультатаКомандаВводаСтроки.Представление
Функция ПараметрыДействияВводаСтроки(СтрокаПоиска, НачальнаяСтрока, Представление) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("СтрокаПоиска", СтрокаПоиска);
	Параметры.Вставить("Представление", Представление);
	Параметры.Вставить("НачальнаяСтрока", НачальнаяСтрока);
	
	Возврат Параметры;
	
КонецФункции

// Стандартные команды
// 
// Возвращаемое значение:
//  Структура - Стандартные команды:
// * Назад - Строка - Команда "Назад" для возвращения к предыдущей команде
// * ВводСтроки - Строка - Команда "Ввод строки" для изменения строки поиска
// * Обновить - Строка - Команда "Обновить" для обновления результатов поиска
// * ВывестиКоманды - Строка - Команда "ВывестиКоманды" для вывода подчиненных команд
Функция СтандартныеКоманды() Экспорт

	Команды = Новый Структура;
	Команды.Вставить("Назад", "Назад");
	Команды.Вставить("ВводСтроки", "ВводСтроки");
	Команды.Вставить("Обновить", "Обновить");
	Команды.Вставить("ВывестиКоманды", "ВывестиКоманды");
	
	Возврат Команды;
	
КонецФункции

#КонецОбласти
