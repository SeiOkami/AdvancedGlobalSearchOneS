// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Заполнение серверных данных перед заполнением параметров расширенного глобального поиска.
// 
// Параметры:
//  Параметры - см. РГП_ГлобальныйПоискКлиент.ПараметрыРасширенногоГлобальногоПоиска
Процедура ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска(Параметры) Экспорт
	
	ЗаполнитьСвойстваОформленияВПараметрахГлобальногоПоиска(Параметры);
	
	ЗаполнитьОписаниеРасширенияВПараметрахГлобальногоПоиска(Параметры);
	
	ЗаполнитьКэшированныеДанныеВПараметрахГлобальногоПоиска(Параметры);
	
	ЗаполнитьДанныеПравДоступаВПараметрахГлобальногоПоиска(Параметры);
	
	ЗаполнитьПользовательскиеНастройкиВПараметрахГлобальногоПоиска(Параметры);
	
	ЗаполнитьИзбранноеВПараметрахГлобальногоПоиска(Параметры);
	
	РГП_ГлобальныйПоискКлиентСервер.ВыполнитьПереопределяемоеСобытие(
		"ПередЗаполнениемПараметровГлобальногоПоиска", Ложь, Истина, Параметры);
	
КонецПроцедуры

// Глобальный поиск метаданные.
// 
// Параметры:
//  ИзначальнаяСтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
Процедура ГлобальныйПоискМетаданные(ИзначальнаяСтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт
	
	ОбщиеПараметры = ПараметрыВыполненияГлобальногоПоискаМетаданных(ИзначальнаяСтрокаПоиска, ПараметрыВыполнения);
	
	ГлобальныйПоискМетаданные_НайтиПодходящиеМетаданные(ОбщиеПараметры);
	
	ГлобальныйПоискМетаданные_ВывестиБазовыеКлассы(ОбщиеПараметры, РезультатыПоиска);
	
	ГлобальныйПоискМетаданные_ЗаполнитьРезультатыПоиска(ОбщиеПараметры, РезультатыПоиска);

КонецПроцедуры

// Метод плана глобального для вычисления выражения
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
Процедура ГлобальныйПоискИсторияВычисленияВыражений(Знач СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	СортировочныйСписок = Новый СписокЗначений();
	ДанныеИстории = Новый Соответствие;

	КлючОбъекта = КлючИсторииВыполненияКоманды(ПараметрыВыполнения.ПолныйКлюч);
	ВыборкаИстории = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));
	Пока ВыборкаИстории.Следующий() Цикл
		
		ЗначениеИстории = РГП_ГлобальныйПоискКлиентСервер.ЭлементИсторииВычисленияВыражения();
		ЗаполнитьЗначенияСвойств(ЗначениеИстории, ВыборкаИстории.Настройки);
		
		ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеВычисленияВыражения(
			ПараметрыВыполнения.ПолныйКлюч, ЗначениеИстории.НаСервере, ЗначениеИстории.Выражение);
		
		Представление = ПредставлениеЭлементаИсторииВычисленияВыражения(ЗначениеИстории);
		
		ЭлементРезультат = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
			ВыполняемоеДействие, Представление);
			
		ЭлементРезультат.Картинка = БиблиотекаКартинок.История;
		
		Если ПараметрыВыполнения.ДоступенБуферОбмена Тогда
			Скопировать = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеСкопироватьВБуфер(
				Строка(ЗначениеИстории.Результат));
			ЭлементРезультат.Действия.Добавить(Скопировать, "В буфер обмена");
		КонецЕсли;
		ДанныеИстории.Вставить(ВыборкаИстории.КлючНастроек, ЭлементРезультат);
		
		ЭлементСортировки = СортировочныйСписок.Добавить();
		ЭлементСортировки.Значение = ЗначениеИстории.Дата;
		ЭлементСортировки.Представление = ВыборкаИстории.КлючНастроек;
		
	КонецЦикла;
	
	СортировочныйСписок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	ОсталосьРезультатов = ПараметрыВыполнения.ПользовательскиеНастройки.МаксимумСтрокРезультата;
	Для Каждого ЭлементСписка Из СортировочныйСписок Цикл
		
		КлючНастройки = ЭлементСписка.Представление;
		Если ОсталосьРезультатов = 0 Тогда
			ХранилищеСистемныхНастроек.Удалить(КлючОбъекта, КлючНастройки, ТекущийПользовательИБ);
		Иначе
			РезультатыПоиска.Добавить(ДанныеИстории.Получить(КлючНастройки));
			ОсталосьРезультатов = ОсталосьРезультатов - 1;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Добавить запись истории выполнения команды.
// 
// Параметры:
//  ПолныйКлючКоманды - Строка
//  КлючЗаписи - Строка
//  ДанныеИстории - Произвольный
//  ХэшироватьКлючЗаписи - Булево - Нужно ли ключ записи хэшировать
Процедура ДобавитьЗаписьИсторииВыполненияКоманды(ПолныйКлючКоманды, 
	Знач КлючЗаписи, ДанныеИстории, ХэшироватьКлючЗаписи = Ложь) Экспорт
	
	КлючОбъекта = КлючИсторииВыполненияКоманды(ПолныйКлючКоманды);
	
	Если ХэшироватьКлючЗаписи Тогда
		КлючЗаписи = КонтрольнаяСуммаСтрокой(КлючЗаписи);
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючЗаписи, ДанныеИстории);
	
КонецПроцедуры

// Параметры выполнения глобального поиска метаданных.
// 
// Параметры:
//  ИзначальнаяСтрокаПоиска - Строка - Изначальная строка поиска
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
// 
// Возвращаемое значение:
//  Структура - :
// * ПараметрыВыполнения - см. ПараметрыВыполненияГлобальногоПоискаМетаданных.ПараметрыВыполнения
// * СловарьПоиска - см. ШаблонСловаряГлобальногоПоискаМетаданных
// * ЭтоПолноправныйПользователь - Булево - Это полноправный пользователь
// * ПодходящиеМетаданные - см. ПодходящиеМетаданныеГлобальногоПоискаМетаданных
// * ПодходящиеБазовыеКлассы - см. КоллекцияМетаданныхПодходящиеБазовыеКлассы
// * УказанБазовыйКласс - Булево - Это вывод всех метаданных или только по базовому классу
// -
// Отключение проверок:
//	BSLLS:MissingParameterDescription-off - Баг BSL LS
//	BSLLS:MissingReturnedValueDescription-off - Баг BSL LS
Функция ПараметрыВыполненияГлобальногоПоискаМетаданных(ИзначальнаяСтрокаПоиска, ПараметрыВыполнения) Экспорт
	
	КлючНастройки = РГП_ГлобальныйПоискКлиентСервер.КлючПользовательскойНастройки_ПоискМетаданных_ВариантыОтчетов();
	ВыводитьВариантыОтчетов = Неопределено;
	ПараметрыВыполнения.ПользовательскиеНастройки.Свойство(КлючНастройки, ВыводитьВариантыОтчетов);
	Если ВыводитьВариантыОтчетов = Неопределено Тогда
		ВыводитьВариантыОтчетов = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	Результат.Вставить("СловарьПоиска", СловарьГлобальногоПоискаМетаданных(ВыводитьВариантыОтчетов));
	Результат.Вставить("ПодходящиеМетаданные", ПодходящиеМетаданныеГлобальногоПоискаМетаданных());
	Результат.Вставить("ПодходящиеБазовыеКлассы", КоллекцияМетаданныхПодходящиеБазовыеКлассы());
	Результат.Вставить("УказанБазовыйКласс", Ложь);
	Результат.Вставить("ЭтоПолноправныйПользователь", ЭтоПолноправныйПользователь());
	
	Возврат Результат;
	
КонецФункции

// Подходящие метаданные глобального поиска метаданных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
// * СтрокаСловаря - СтрокаТаблицыЗначений: см. КоллекцияМетаданныхСловаряГлобальногоПоиска
// * Приоритет - Число - Приоритет вывода. Пользователь первыми будет видеть строки с максимальным значением
// * Имя - Строка - Имя объекта
// * ВариантыОтчетов - Массив из СтрокаТаблицыЗначений: см. КоллекцияВариантовОтчетовСловаряПоискаПоМетаданным
Функция ПодходящиеМетаданныеГлобальногоПоискаМетаданных() Экспорт
	
	ПодходящиеМетаданные = Новый ТаблицаЗначений;
	ПодходящиеМетаданные.Колонки.Добавить("СтрокаСловаря", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	ПодходящиеМетаданные.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ПодходящиеМетаданные.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ПодходящиеМетаданные.Колонки.Добавить("ВариантыОтчетов", Новый ОписаниеТипов("Массив"));
	
	Возврат ПодходящиеМетаданные;
	
КонецФункции

// Словарь глобального поиска метаданных.
// 
// Параметры:
//  ВыводитьВариантыОтчетов - Булево - Нужно ли собирать информацию по вариантам отчетов
//  ИзКэша - Булево - Выбирать ли закэшированную структуру
//  	Не рекомендуется Передавать значение Ложь, так как все внутренние механизмы используют закэшированное значение
// 
// Возвращаемое значение:
//  см. ШаблонСловаряГлобальногоПоискаМетаданных
Функция СловарьГлобальногоПоискаМетаданных(ВыводитьВариантыОтчетов, ИзКэша = Истина) Экспорт
	
	Если ИзКэша Тогда
		//@skip-check dynamic-access-method-not-found - Баг ЕДТ
		//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part - Баг ЕДТ
		Возврат РГП_ГлобальныйПоискСерверПовтИсп.СловарьГлобальногоПоискаМетаданных(ВыводитьВариантыОтчетов);
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияСловаряПоискаПоМетаданным();
	ПараметрыЗаполнения.ВыводитьВариантыОтчетов = ВыводитьВариантыОтчетов;
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.Справочники, "Справочники", "Справочник", Истина, Истина);
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.Документы, "Документы", "Документ", Истина, Истина);
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.ЖурналыДокументов, "ЖурналыДокументов", "ЖурналДокументов", Ложь, Ложь, "Журналы документов");
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.Отчеты, "Отчеты", "Отчет", Ложь, Ложь);
		
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.Обработки, "Обработки", "Обработка", Ложь, Ложь);
		
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.РегистрыСведений, "РегистрыСведений", "РегистрСведений", Истина, Ложь, "Регистры сведений");
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.РегистрыНакопления, "РегистрыНакопления", "РегистрНакопления", Истина, Ложь, "Регистры накопления");
	
    ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.РегистрыБухгалтерии, "РегистрыБухгалтерии", "РегистрБухгалтерии", Истина, Ложь, "Регистры бухгалтерии");
	
    ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.РегистрыРасчета, "РегистрыРасчета", "РегистрРасчета", Истина, Ложь, "Регистры расчета");
		
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.БизнесПроцессы, "БизнесПроцессы", "БизнесПроцесс", Истина, Истина, "Бизнес процессы");
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.Задачи, "Задачи", "Задача", Истина, Истина);
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.ПланыВидовРасчета, 
		"ПланыВидовРасчета", "ПланВидовРасчета", Истина, Истина, "Планы видов расчета");
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.ПланыВидовХарактеристик, 
		"ПланыВидовХарактеристик", "ПланВидовХарактеристик", Истина, Истина, "Планы видов характеристик");
		
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.ПланыОбмена, "ПланыОбмена", "ПланОбмена", Истина, Истина, "Планы обмена");
	
	ДобавитьМетаданныеВСловарь(ПараметрыЗаполнения, 
		Метаданные.ПланыСчетов, "ПланыСчетов", "ПланСчетов", Истина, Истина, "Планы счетов");
		
	ПараметрыЗаполнения.СловарьПоиска.Метаданные.Сортировать("Имя");
	
	Возврат ПараметрыЗаполнения.СловарьПоиска;
		
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей
//
// Параметры:
//  ИменаРолей - см. РГП_ГлобальныйПоискКлиентСервер.МассивИменРолейИзПараметра.ИменаРолей
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна
//
Функция РолиДоступны(ИменаРолей) Экспорт
	
	ОписаниеМодуля = ОписаниеМодуляПользователи();
	Если ОписаниеМодуля = Неопределено Тогда
		
		МассивРолей = РГП_ГлобальныйПоискКлиентСервер.МассивИменРолейИзПараметра(ИменаРолей);
		Для Каждого ИмяРоли Из МассивРолей Цикл
			
			// Смысл функции - проверять роль
			// @skip-check using-isinrole - // BSLLS:IsInRoleMethod-off
			Если РольДоступна(ИмяРоли) Тогда
				Возврат Истина;
			КонецЕсли;
					
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		ПараметрыМетода = Новый Массив(1);
		ПараметрыМетода[0] = ИменаРолей;
		Результат = ВыполнитьМетод(ОписаниеМодуля.ИмяМодуля, 
			ОписаниеМодуля.Методы.РолиДоступны, Истина, ПараметрыМетода); // Булево
		Возврат Булево(Результат); // Заставим строгую типизацию ЕДТ понять, что тут только булево
		
	КонецЕсли;
	
КонецФункции

// Это полноправный пользователь.
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоПолноправныйПользователь() Экспорт
	
	ОписаниеМодуля = ОписаниеМодуляПользователи();
	Если НЕ ОписаниеМодуля = Неопределено Тогда
		
		Попытка
			Результат = ВыполнитьМетод(ОписаниеМодуля.ИмяМодуля, 
				ОписаниеМодуля.Методы.ЭтоПолноправныйПользователь, Истина); // Булево
			Возврат Булево(Результат); // Заставим строгую типизацию ЕДТ понять, что тут только булево
		Исключение
		    РГП_ГлобальныйПоискКлиентСервер.ОбработатьОшибку(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПравоДоступа("Администрирование", Метаданные) 
		И ПравоДоступа("АдминистрированиеДанных", Метаданные) 
		И ПравоДоступа("АдминистрированиеРасширенийКонфигурации", Метаданные);
	
КонецФункции

// Добавить запись ЖР.
// 
// Параметры:
//  Текст - Строка - Комментарий записи
//  Уровень - Строка, УровеньЖурналаРегистрации - Уровень записи
Процедура ДобавитьЗаписьЖР(Текст, Знач Уровень = "Ошибка") Экспорт
	
	Уровень = ?(ТипЗнч(Уровень) = Тип("Строка"), УровеньЖурналаРегистрации[Уровень], Уровень);
	
	КлючЗаписиЖР = ФразаИнтерфейса("РасширенныйГлобальныйПоиск");
	ЗаписьЖурналаРегистрации(КлючЗаписиЖР, Уровень, , , Текст);
	
КонецПроцедуры

// Записать значения пользовательских настроек.
// 
// Параметры:
//  ПользовательскиеНастройки - см. РГП_ГлобальныйПоискКлиентСервер.НоваяКоллекцияПользовательскихНастроек
Процедура ЗаписатьЗначенияПользовательскихНастроек(ПользовательскиеНастройки) Экспорт
	
	ПараметрыОтбора = ПараметрыОтбораХранилищаПользовательскихНастроек();
	Хранилище = ХранилищеПользовательскихНастроек();
	Хранилище.Сохранить(ПараметрыОтбора.КлючОбъекта, ПараметрыОтбора.КлючНастроек, 
		ПользовательскиеНастройки, , ПараметрыОтбора.Пользователь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Обработчик команды очистки настроек.
// 
// Параметры:
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ПараметрыВыполненияКомандыОчисткиНастроек
Процедура ОбработчикКомандыОчисткиНастроек(ПараметрыВыполнения) Экспорт
	
	ПараметрыОтбора = ПараметрыОтбораХранилищаПользовательскихНастроек();
	Хранилище = ХранилищеПользовательскихНастроек();
	
	НовыеНастройки = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.КлючКоманды) Тогда 
		Выборка = Хранилище.Выбрать(ПараметрыОтбора);
		Если Выборка.Следующий() Тогда
			НовыеНастройки = Выборка.Настройки; // см. РГП_ГлобальныйПоискКлиентСервер.НоваяКоллекцияПользовательскихНастроек
			НовыеНастройки.НастройкиКоманд.Удалить(ПараметрыВыполнения.КлючКоманды);
		КонецЕсли;	
	КонецЕсли;
	
	Хранилище.Сохранить(ПараметрыОтбора.КлючОбъекта, ПараметрыОтбора.КлючНастроек, 
		НовыеНастройки, , ПараметрыВыполнения.Пользователь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Параметры:
//  НавигационнаяСсылка - Строка
//  НовыеДанные - см. РГП_ГлобальныйПоискКлиентСервер.ЭлементИзбранного
// 
Процедура ИзменитьИзбранное(Знач НавигационнаяСсылка = "", Знач НовыеДанные = Неопределено) Экспорт
	
	ИзбранноеРаботы = ИзбранноеРаботыПользователя();
	
	ИндексИзбранного = Неопределено; // Число
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ИзменитьИзбранное_Удалить(ИзбранноеРаботы, НавигационнаяСсылка, ИндексИзбранного);
	КонецЕсли;
	
	Если НЕ НовыеДанные = Неопределено Тогда
		ИзменитьИзбранное_Добавить(ИзбранноеРаботы, НовыеДанные, ИндексИзбранного);
	КонецЕсли;
	
	СохранитьИзбранноеРаботыПользователя(ИзбранноеРаботы);
	
КонецПроцедуры

// Параметры:
//  Клиент - Булево - Это клиентский контекст
//  Сервер - Булево - Это серверный контекст
// 
// Возвращаемое значение:
//  ФиксированныйМассив из Строка - Имена переопределяемых общих модулей
Функция ПереопределяемыеОбщиеМодули(Клиент, Сервер) Экспорт
	
	Результат = Новый Массив; // Массив из Строка
	
	ИмяШаблонаМодуля = СтрШаблон("РГП_ГлобальныйПоиск%1%2Переопределяемый", 
		?(Клиент, "Клиент", ""), 
		?(Сервер, "Сервер", ""));
	
	Для Каждого ОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
		
		ИмяМодуля = ОбщийМодуль.Имя;
		Если ИмяМодуля <> ИмяШаблонаМодуля
			И СтрНачинаетсяС(ИмяМодуля, ИмяШаблонаМодуля) Тогда
				
			Результат.Добавить(ИмяМодуля);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Параметры:
//  ОбъектИлиИмя - Строка, ОбщийМодуль, Произвольный -
//  ИмяМетода - Строка
//  ЭтоФункция - Булево
//  Параметры - Массив из Произвольный
// 
// Возвращаемое значение:
//  Произвольный
Функция ВыполнитьМетод(Знач ОбъектИлиИмя, ИмяМетода, ЭтоФункция, Параметры = Неопределено) Экспорт
	
	РГП_ГлобальныйПоискКлиентСервер.ПроверитьСоответствуетПравилуИмениКода(ИмяМетода);
	
	Если ТипЗнч(ОбъектИлиИмя) = Тип("Строка") Тогда
		РГП_ГлобальныйПоискКлиентСервер.ПроверитьСоответствуетПравилуИмениКода(ОбъектИлиИмя);
		//@skip-check server-execution-safe-mode - Получение модуля по имени
		Объект = Вычислить(ОбъектИлиИмя); // BSLLS:ExecuteExternalCodeInCommonModule-off
	Иначе
		//@skip-check statement-type-change
		Объект = ОбъектИлиИмя;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ТекстИсключения = ФразаИнтерфейса("Некорректное значение параметра");
		ТекстИсключения = СтрШаблон("%1 %2", ТекстИсключения, ОбъектИлиИмя);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	ТекстСкрипта = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Если ЭтоФункция Тогда
		//@skip-check server-execution-safe-mode
		Возврат Вычислить(ТекстСкрипта); // BSLLS:ExecuteExternalCodeInCommonModule-off
	Иначе
		//@skip-check server-execution-safe-mode
		Выполнить(ТекстСкрипта); // BSLLS:ExecuteExternalCodeInCommonModule-off
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнить свойства оформления в параметрах глобального поиска.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьСвойстваОформленияВПараметрахГлобальногоПоиска(Параметры)
	
	Параметры.ШрифтЗаголовковМеню = РГП_ГлобальныйПоискКлиентСервер.ШрифтЗаголовковМеню();
	Параметры.ШрифтДопИнформации = РГП_ГлобальныйПоискКлиентСервер.ШрифтДопИнформации();
	
	Параметры.ЦветОсобогоТекста = РГП_ГлобальныйПоискКлиентСервер.ЦветОсобогоТекста();
	Параметры.ЦветФонаВыделения = РГП_ГлобальныйПоискКлиентСервер.ЦветФонаВыделения();
	Параметры.ЦветЗаголовковМеню = РГП_ГлобальныйПоискКлиентСервер.ЦветЗаголовковМеню();
	
КонецПроцедуры

// Заполнить описание расширения в параметрах глобального поиска.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьОписаниеРасширенияВПараметрахГлобальногоПоиска(Параметры)

	РасширениеКонфигурации = Метаданные.ОбщиеМодули.РГП_ГлобальныйПоискСервер.РасширениеКонфигурации();
	МетаданныеРасширения   = Новый ОписаниеКонфигурации(РасширениеКонфигурации.ПолучитьДанные());
	
	ОписаниеРасширения     = Параметры.ОписаниеРасширения;
	ОписаниеРасширения.Версия = РасширениеКонфигурации.Версия;
	ОписаниеРасширения.Репозиторий = МетаданныеРасширения.Поставщик;
	
КонецПроцедуры

// Заполнить кэшированные данные в параметрах глобального поиска.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьКэшированныеДанныеВПараметрахГлобальногоПоиска(Параметры)

	Параметры.КэшированныеДанные.ЭтоПолноправныйПользователь = ЭтоПолноправныйПользователь();
	
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "Администрирование");
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "СохранениеДанныхПользователя");
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "АдминистрированиеДанных");
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "АдминистрированиеРасширенийКонфигурации");
	
КонецПроцедуры

// Заполнить настройки прав доступа.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьДанныеПравДоступаВПараметрахГлобальногоПоиска(Параметры)

	Параметры.ДоступноИзбранное = РГП_ГлобальныйПоискКлиентСервер.ЕстьПравоДоступа(
		Параметры, "СохранениеДанныхПользователя");
	
КонецПроцедуры

// Заполнить пользовательские настройки в параметрах глобального поиска.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьПользовательскиеНастройкиВПараметрахГлобальногоПоиска(Параметры)
	
	ПараметрыОтбора = ПараметрыОтбораХранилищаПользовательскихНастроек();
	
	Выборка = ХранилищеПользовательскихНастроек().Выбрать(ПараметрыОтбора);
	Если Выборка.Следующий() Тогда
		НастройкиИзБазы = Выборка.Настройки; // см. РГП_ГлобальныйПоискКлиентСервер.НоваяКоллекцияПользовательскихНастроек
		РГП_ГлобальныйПоискКлиентСервер.ЗаполнитьСтруктуруРекурсивно(
			Параметры.ПользовательскиеНастройки, НастройкиИзБазы);
	КонецЕсли;
	
	РГП_ГлобальныйПоискКлиентСервер.ОбработатьЗначенияПользовательскихНастроек(
		Параметры.ПользовательскиеНастройки.ОбщиеНастройки, Параметры.ОписанияПользовательскихНастроек);
	
КонецПроцедуры

// Параметры отбора хранилища пользовательских настроек.
// 
// Параметры:
//  Пользователь - Строка
// 
// Возвращаемое значение:
//  Структура - :
// * КлючОбъекта - Строка - 
// * КлючНастроек - Строка - 
// * Пользователь - Строка, Неопределено - 
Функция ПараметрыОтбораХранилищаПользовательскихНастроек(Знач Пользователь = Неопределено)
	
	КлючПодсистемы = РГП_ГлобальныйПоискКлиентСервер.КлючПодсистемы();
	
	Если Пользователь = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			Пользователь = ПользовательИБ.Имя;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КлючОбъекта", КлючПодсистемы);
	Результат.Вставить("КлючНастроек", "ПользовательскиеНастройки");
	Результат.Вставить("Пользователь", Пользователь);
	
	Возврат Результат;
	
КонецФункции

// Хранилище пользовательских настроек.
// 
// Возвращаемое значение:
//  СтандартноеХранилищеНастроекМенеджер
Функция ХранилищеПользовательскихНастроек()
	
	Возврат ХранилищеСистемныхНастроек;
	
КонецФункции

// Глобальный поиск метаданные найти подходящие метаданные.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
Процедура ГлобальныйПоискМетаданные_НайтиПодходящиеМетаданные(ОбщиеПараметры)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	КлючТипа = РГП_ГлобальныйПоискКлиентСервер.ЗначениеПараметраКоманды_Тип(ПараметрыВыполнения);
	КлючТипаВрег = ВРег(КлючТипа);
	КлючЛюбогоТипа = РГП_ГлобальныйПоискКлиентСервер.ЗначениеПараметраКоманды_ЛюбойТип();
	ВыводВсехТипов = КлючТипаВрег = ВРег(КлючЛюбогоТипа);
	УказанКлючТипа = ЗначениеЗаполнено(КлючТипа);
	ЗаполненаСтрокаПоиска = ЗначениеЗаполнено(ПараметрыВыполнения.СтрокаПоиска);
	
	ОбщиеПараметры.УказанБазовыйКласс = УказанКлючТипа И НЕ ВыводВсехТипов;
	
	МетаданныеСловаря = ОбщиеПараметры.СловарьПоиска.Метаданные;
	
	Если ОбщиеПараметры.УказанБазовыйКласс Тогда
		ДанныеСловаря = МетаданныеСловаря.НайтиСтроки(Новый Структура("ИмяТипаВрег", КлючТипаВрег));
	Иначе
		ДанныеСловаря = МетаданныеСловаря; // @skip-check statement-type-change
	КонецЕсли;
	
	Для Каждого СтрокаСловаря Из ДанныеСловаря Цикл
		
		Если ЗаполненаСтрокаПоиска Тогда
			ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря(ОбщиеПараметры, СтрокаСловаря);
		Иначе
			ГлобальныйПоискМетаданные_ДобавитьПодходящиеМетаданные(ОбщиеПараметры, СтрокаСловаря);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполненаСтрокаПоиска Тогда
		ИменаПолейСортировки = "Приоритет УБЫВ";
	ИначеЕсли НЕ УказанКлючТипа Тогда // Основное меню, сами метаданные не выводим, но типы оставляем
		ОбщиеПараметры.ПодходящиеМетаданные.Очистить();
		ИменаПолейСортировки = "";
	Иначе
		ИменаПолейСортировки = "Имя";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаПолейСортировки) Тогда
		ОбщиеПараметры.ПодходящиеМетаданные.Сортировать(ИменаПолейСортировки);
	КонецЕсли;
	
КонецПроцедуры

// Глобальный поиск метаданные обработать строку словаря.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
//  СтрокаСловаря - СтрокаТаблицыЗначений: см. КоллекцияМетаданныхСловаряГлобальногоПоиска
//
// Отключение проверок
//	BSLLS:MissingParameterDescription-off - Баг BSL LS
Процедура ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря(ОбщиеПараметры, СтрокаСловаря)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	МаксимальныйПриоритет = ПараметрыВыполнения.МаксимальныйПриоритет;
	СдвигПриоритетаВхождения = 2;
	
	Приоритет = 0;

	ПроверяемыеСвойстваМетаданных    = Новый Массив(3); // Массив из Строка
	ПроверяемыеСвойстваМетаданных[0] = ВРег(СтрокаСловаря.Имя);
	ПроверяемыеСвойстваМетаданных[1] = ВРег(СтрокаСловаря.Представление);
	ПроверяемыеСвойстваМетаданных[2] = ВРег(СтрокаСловаря.ПолноеИмя);

	Для ИндексСвойства = 0 По ПроверяемыеСвойстваМетаданных.Количество() - 1 Цикл

		ЗначениеСвойства = ПроверяемыеСвойстваМетаданных[ИндексСвойства];
		Если ЗначениеСвойства = ПараметрыВыполнения.СтрокаПоискаВрег Тогда
			Приоритет = МаксимальныйПриоритет;
		Иначе
			НайденнаяКоордината = СтрНайти(ЗначениеСвойства, ПараметрыВыполнения.СтрокаПоискаВрег);
			Если НайденнаяКоордината = 0 Тогда
				Продолжить;
			ИначеЕсли НайденнаяКоордината = 1 Тогда
				Приоритет = МаксимальныйПриоритет - 1;
			Иначе
				Приоритет = МаксимальныйПриоритет - СдвигПриоритетаВхождения;
			КонецЕсли;
		КонецЕсли;

		Прервать;

	КонецЦикла;

	ГлобальныйПоискМетаданные_ОбработатьПриоритетСтрокиСловаря(ОбщиеПараметры, СтрокаСловаря, Приоритет);
	
КонецПроцедуры

// Глобальный поиск метаданные обработать приоритет строки словаря.
// 
// Параметры:
//  ОбщиеПараметры - см. ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря.ОбщиеПараметры
//  СтрокаСловаря - см. ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря.СтрокаСловаря
//  Приоритет - Число
Процедура ГлобальныйПоискМетаданные_ОбработатьПриоритетСтрокиСловаря(ОбщиеПараметры, СтрокаСловаря, Приоритет)
	
	ПодходящиеВариантыОтчетов = Новый Массив; // Массив из СтрокаТаблицыЗначений
	ВыполнитьДополнительныйПоиск = ЗначениеЗаполнено(СтрокаСловаря.ВариантыОтчетов) ИЛИ Приоритет = 0;
	Если ВыполнитьДополнительныйПоиск Тогда
		ГлобальныйПоискМетаданные_ЗаполнитьПриоритетСтрокиСловаря(ОбщиеПараметры, 
			СтрокаСловаря, Приоритет, ПодходящиеВариантыОтчетов);
	КонецЕсли;

	Если Приоритет > 0 Тогда
		ГлобальныйПоискМетаданные_ДобавитьПодходящиеМетаданные(ОбщиеПараметры, 
			СтрокаСловаря, Приоритет, ПодходящиеВариантыОтчетов);
	КонецЕсли;
	
КонецПроцедуры

// Глобальный поиск метаданные обработать приоритет строки словаря.
// 
// Параметры:
//  ОбщиеПараметры - см. ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря.ОбщиеПараметры
//  СтрокаСловаря - см. ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря.СтрокаСловаря
//  Приоритет - Число
//  ПодходящиеВариантыОтчетов - Массив из СтрокаТаблицыЗначений: см. КоллекцияВариантовОтчетовСловаряПоискаПоМетаданным
Процедура ГлобальныйПоискМетаданные_ЗаполнитьПриоритетСтрокиСловаря(ОбщиеПараметры, 
	СтрокаСловаря, Приоритет, ПодходящиеВариантыОтчетов)
	
	Для Каждого СловоПоиска Из ОбщиеПараметры.ПараметрыВыполнения.СловаПоиска Цикл
		Если СтрНайти(СтрокаСловаря.КлючевыеСлова, СловоПоиска) > 0 Тогда
			
			Приоритет = Приоритет + 1;
			
			Для Каждого ВариантОтчета Из СтрокаСловаря.ВариантыОтчетов Цикл
				Если СтрНайти(ВариантОтчета.КлючевыеСлова, СловоПоиска) > 0 Тогда
					ПодходящиеВариантыОтчетов.Добавить(ВариантОтчета);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск метаданные добавить подходящие метаданные.
// 
// Параметры:
//  ОбщиеПараметры - см. ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря.ОбщиеПараметры
//  СтрокаСловаря - см. ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря.СтрокаСловаря
//  Приоритет - Число
//  ВариантыОтчетов - Неопределено - Выводить варианты отчетов подходят
// 					- Массив из Строка - Имена подходящих вариантов отчетов
Процедура ГлобальныйПоискМетаданные_ДобавитьПодходящиеМетаданные(ОбщиеПараметры, СтрокаСловаря, 
	Приоритет = 0, Знач ВариантыОтчетов = Неопределено)
	
	СтрокаМетаданных = ОбщиеПараметры.ПодходящиеМетаданные.Добавить();
	СтрокаМетаданных.СтрокаСловаря = СтрокаСловаря;
	ЗаполнитьЗначенияСвойств(СтрокаМетаданных, СтрокаСловаря);
	СтрокаМетаданных.Приоритет = Приоритет;
	
	Если ТипЗнч(ВариантыОтчетов) = Тип("Массив") Тогда
		СтрокаМетаданных.ВариантыОтчетов = ВариантыОтчетов;
	Иначе
		СтрокаМетаданных.ВариантыОтчетов = Новый Массив;
		Для Каждого ВариантОтчета Из СтрокаСловаря.ВариантыОтчетов Цикл
			//@skip-check invocation-parameter-type-intersect - Баг ЕДТ
			СтрокаМетаданных.ВариантыОтчетов.Добавить(ВариантОтчета);
		КонецЦикла;
	КонецЕсли;
	
	ПодходящиеБазовыеКлассы = ОбщиеПараметры.ПодходящиеБазовыеКлассы;
	СтрокаБазовогоКласса = ПодходящиеБазовыеКлассы.Найти(СтрокаСловаря.ИмяТипаВрег, "ИмяТипаВрег");
	Если СтрокаБазовогоКласса = Неопределено Тогда
		СтрокаБазовогоКласса = ПодходящиеБазовыеКлассы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаБазовогоКласса, СтрокаСловаря);
	КонецЕсли;
	
	СтрокаБазовогоКласса.Количество = СтрокаБазовогоКласса.Количество + 1;
	
КонецПроцедуры

// Глобальный поиск метаданные - заполнить базовые классы.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
//  РезультатыПоиска - см. ГлобальныйПоискМетаданные.РезультатыПоиска
Процедура ГлобальныйПоискМетаданные_ВывестиБазовыеКлассы(ОбщиеПараметры, РезультатыПоиска)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	КлючПараметраТипа = РГП_ГлобальныйПоискКлиентСервер.КлючПараметрКоманды_Тип();
	ПолныйКлючКоманды = ПараметрыВыполнения.ПолныйКлюч;
	СтрокаПоиска = ПараметрыВыполнения.СтрокаПоиска;
	
	ТекущийТип = РГП_ГлобальныйПоискКлиентСервер.ЗначениеПараметраКоманды_Тип(ПараметрыВыполнения);
	Если ЗначениеЗаполнено(ТекущийТип) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ПодходящиеБазовыеКлассы.Сортировать("ПорядокТипа");
	
	ОбщаяСтрока = ОбщиеПараметры.ПодходящиеБазовыеКлассы.Вставить(0);
	ОбщаяСтрока.ИмяТипа = РГП_ГлобальныйПоискКлиентСервер.ЗначениеПараметраКоманды_ЛюбойТип();
	ОбщаяСтрока.ПредставлениеТипа = ОбщаяСтрока.ИмяТипа;
	ОбщаяСтрока.Количество = ОбщиеПараметры.ПодходящиеБазовыеКлассы.Итог("Количество");
	ОбщаяСтрока.Картинка = БиблиотекаКартинок.ПоискДанных;
	
	Для Каждого БазовыйКласс Из ОбщиеПараметры.ПодходящиеБазовыеКлассы Цикл
		
		ПередаваемыеПараметры = РГП_ГлобальныйПоискКлиентСервер.Копия(ПараметрыВыполнения.ПараметрыКоманды);
		ПередаваемыеПараметры.Вставить(КлючПараметраТипа, БазовыйКласс.ИмяТипа);
		
		ПредставлениеРезультата = СтрШаблон("%1 (%2)", БазовыйКласс.ПредставлениеТипа, БазовыйКласс.Количество);
		
		ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеПереходаНаКоманду(
			ПолныйКлючКоманды, ПередаваемыеПараметры, СтрокаПоиска);
		
		РГП_ГлобальныйПоискКлиентСервер.ДобавитьЭлементРезультатаГлобальногоПоиска(РезультатыПоиска, 
			ВыполняемоеДействие, ПредставлениеРезультата, БазовыйКласс.Картинка);
		
	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск метаданные найти подходящие метаданные.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
//  РезультатыПоиска - см. ГлобальныйПоискМетаданные.РезультатыПоиска
Процедура ГлобальныйПоискМетаданные_ЗаполнитьРезультатыПоиска(ОбщиеПараметры, РезультатыПоиска)
	
	УказанБазовыйКласс = ОбщиеПараметры.УказанБазовыйКласс;
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	ПодходящиеМетаданные = ОбщиеПараметры.ПодходящиеМетаданные;
	
	ПараметрыВывода = РГП_ГлобальныйПоискКлиентСервер.ПараметрыОбработкиСтраницРезультатаКоманды(
		ПараметрыВыполнения, ПодходящиеМетаданные, РезультатыПоиска);
		
	ВыводимыеСтроки = ПараметрыВывода.ВыводимыеСтроки; // см. ПодходящиеМетаданныеГлобальногоПоискаМетаданных
	
	Для Каждого СтрокаМетаданных Из ВыводимыеСтроки Цикл
		
		СтрокаСловаря = СтрокаМетаданных.СтрокаСловаря;
		
		ПредставлениеРезультата = ?(УказанБазовыйКласс, СтрокаСловаря.Имя, СтрокаСловаря.ПолноеИмя);
		
		ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
			СтрокаСловаря.СсылкаСписка, ПредставлениеРезультата, СтрокаСловаря.Картинка);
		
		Если СтрокаСловаря.ЕстьПравоСоздания Тогда
			ЭлементРезультата.Действия.Добавить(СтрокаСловаря.СсылкаСоздания, ФразаИнтерфейса("Создать"));
		КонецЕсли;
		
		Если СтрокаСловаря.ЕстьПравоПоиска Тогда
			
			ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОткрытияФормы(
				"ОбщаяФорма.РГП_БыстрыйПоискСсылки", Новый Структура("ПолноеИмяМетаданных", СтрокаСловаря.ПолноеИмя));
		
			ЭлементРезультата.Действия.Добавить(ВыполняемоеДействие, ФразаИнтерфейса("Найти"));
			
		КонецЕсли;
		
		Если СтрокаСловаря.ЭтоТаблицаДанных И ОбщиеПараметры.ЭтоПолноправныйПользователь Тогда
			
			ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОткрытияФормы(
				"ОбщаяФорма.РГП_ДинамическийСписок", Новый Структура("ПолноеИмяМетаданных", СтрокаСловаря.ПолноеИмя));
		
			ЭлементРезультата.Действия.Добавить(ВыполняемоеДействие, ФразаИнтерфейса("Анализ данных"));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементРезультата.Действия) Тогда
			ЭлементРезультата.Действия.Вставить(0, СтрокаСловаря.СсылкаСписка, ФразаИнтерфейса("Открыть"));
		КонецЕсли;
		
		ГлобальныйПоискМетаданные_ЗаполнитьРезультатыПоиска_ВариантыОтчета(ЭлементРезультата, СтрокаМетаданных);
		
		РезультатыПоиска.Добавить(ЭлементРезультата);
		
	КонецЦикла;
	
КонецПроцедуры

// Глобальный поиск метаданные заполнить результаты поиска варианты отчета.
// 
// Параметры:
//  ЭлементРезультата - ЭлементРезультатаГлобальногоПоиска
//  СтрокаМетаданных - СтрокаТаблицыЗначений: см. ПодходящиеМетаданныеГлобальногоПоискаМетаданных
Процедура ГлобальныйПоискМетаданные_ЗаполнитьРезультатыПоиска_ВариантыОтчета(ЭлементРезультата, СтрокаМетаданных)
	
	ИмяОсновнойФормы = СтрШаблон("%1.Форма", СтрокаМетаданных.СтрокаСловаря.ПолноеИмя);
	Для Каждого ВариантОтчета Из СтрокаМетаданных.ВариантыОтчетов Цикл
		
		Если ВРег(ВариантОтчета.Представление) = СтандартноеИмяОсновногоВариантаОтчета() Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеОткрытияФормы(
			ИмяОсновнойФормы, Новый Структура("КлючВарианта", ВариантОтчета.Имя));
			
		ЭлементРезультата.Действия.Добавить(ВыполняемоеДействие, ВариантОтчета.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

// Шаблон словаря поиска метаданных.
// 
// Возвращаемое значение:
//  Структура - Шаблон словаря поиска метаданных:
// * КлючиТипов - Соответствие из КлючИЗначение:
// ** Ключ - Строка
// ** Значение - Строка
// * Метаданные - см. КоллекцияМетаданныхСловаряГлобальногоПоиска
Функция ШаблонСловаряГлобальногоПоискаМетаданных()
	
	Словарь = Новый Структура;
	Словарь.Вставить("КлючиТипов", Новый Соответствие);
	Словарь.Вставить("Метаданные", КоллекцияМетаданныхСловаряГлобальногоПоиска());
	
	Возврат Словарь;
		
КонецФункции

// Коллекция метаданных подходящие базовые классы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
// * ИмяТипа - Строка
// * ИмяТипаВрег - Строка
// * ПорядокТипа - Число
// * ПредставлениеТипа - Строка 
// * Картинка - Картинка
// * Количество - Число
Функция КоллекцияМетаданныхПодходящиеБазовыеКлассы()
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипаСтрока   = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло    = Новый ОписаниеТипов("Число");
	
	Результат.Колонки.Добавить("ИмяТипа"          , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИмяТипаВрег"      , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ПорядокТипа"      , ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ПредставлениеТипа", ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("Картинка"         , Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Количество"       , ОписаниеТипаЧисло);
	
	Результат.Индексы.Добавить("ИмяТипаВрег");
	Результат.Индексы.Добавить("ПорядокТипа");
	
	Возврат Результат;
	
КонецФункции

// Коллекция метаданных словаря глобального поиска.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -:
// * Имя - Строка
// * Представление - Строка
// * ПолноеИмя - Строка
// * ИмяТипа - Строка
// * ПорядокТипа - Число
// * ИмяТипаВрег - Строка
// * ПредставлениеТипа - Строка
// * ИмяТипаЕд - Строка
// * КлючевыеСлова - Строка
// * Картинка - Картинка
// * СсылкаСписка - Строка
// * СсылкаСоздания - Строка
// * ЭтоТаблицаДанных - Булево
// * ЕстьПравоСоздания - Булево
// * ЕстьПравоПоиска - Булево
// * ВариантыОтчетов - см. КоллекцияВариантовОтчетовСловаряПоискаПоМетаданным
Функция КоллекцияМетаданныхСловаряГлобальногоПоиска()
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипаСтрока   = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло    = Новый ОписаниеТипов("Число");
	ОписаниеТипаБулево   = Новый ОписаниеТипов("Булево");
	ОписаниеТипаКартинка = Новый ОписаниеТипов("Картинка");
	
	Результат.Колонки.Добавить("Имя"              , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("Представление"    , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ПолноеИмя"        , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ПредставлениеТипа", ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИмяТипа"          , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИмяТипаВрег"      , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИмяТипаЕд"        , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ПорядокТипа"      , ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("КлючевыеСлова"    , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("Картинка"         , ОписаниеТипаКартинка);
	Результат.Колонки.Добавить("СсылкаСписка"     , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("СсылкаСоздания"   , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ЭтоТаблицаДанных" , ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЕстьПравоСоздания", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЕстьПравоПоиска"  , ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ВариантыОтчетов"  , Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Индексы.Добавить("ИмяТипа");
	
	Возврат Результат;
	
КонецФункции

// Параметры заполнения словаря поиска по метаданным.
// 
// Возвращаемое значение:
//  Структура - :
// * ВыводитьВариантыОтчетов - см. СловарьГлобальногоПоискаМетаданных.ВыводитьВариантыОтчетов
// * СловарьПоиска - см. ШаблонСловаряГлобальногоПоискаМетаданных
Функция ПараметрыЗаполненияСловаряПоискаПоМетаданным()
	
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьВариантыОтчетов", Ложь);
	Результат.Вставить("СловарьПоиска", ШаблонСловаряГлобальногоПоискаМетаданных());
	
	Возврат Результат;
	
КонецФункции

// Коллекция вариантов отчетов словаря поиска по метаданным.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
// * Имя - Строка - Имя варианта отчета
// * Представление - Строка - Представление варианта отчета
// * КлючевыеСлова - Строка - Ключевые слова
Функция КоллекцияВариантовОтчетовСловаряПоискаПоМетаданным()
	
	ОписаниеТипаСтрока   = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Имя", ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("Представление", ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("КлючевыеСлова", ОписаниеТипаСтрока);
	
	Возврат Результат;
	
КонецФункции

// Добавить метаданные в словарь.
// 
// Параметры:
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияСловаряПоискаПоМетаданным
//  КоллекцияМетаданных - КоллекцияОбъектовМетаданных
//  ИмяКоллекции - Строка
//  ИмяКоллекцииЕд - Строка
//  ЭтоТаблицаДанных - Булево
//  ЭтоСсылочныйТип - Булево
//  ПредставлениеТипа - Строка
Процедура ДобавитьМетаданныеВСловарь(Знач ПараметрыЗаполнения, Знач КоллекцияМетаданных, 
	Знач ИмяКоллекции, Знач ИмяКоллекцииЕд, Знач ЭтоТаблицаДанных, Знач ЭтоСсылочныйТип, Знач ПредставлениеТипа = "")
	
	Словарь = ПараметрыЗаполнения.СловарьПоиска;
	
	ПорядокТипа = ?(ЗначениеЗаполнено(Словарь.Метаданные), 
		Словарь.Метаданные[Словарь.Метаданные.Количество() - 1].ПорядокТипа, 0) + 1;
	
	ИмяКоллекции   = ФразаИнтерфейса(ИмяКоллекции);
	ЭтоПолныеПрава = ЭтоПолноправныйПользователь();
	ИмяКоллекцииЕд = ВРег(ИмяКоллекцииЕд);
	КартинкаТипа   = БиблиотекаКартинок[ИмяКоллекцииЕд]; // Картинка
	ЭтоОтчеты      = (КоллекцияМетаданных = Метаданные.Отчеты);
		
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		
		ВыводитьМетаданные = ЭтоПолныеПрава ИЛИ ПравоДоступа("Просмотр", ОбъектМетаданных);
		Если НЕ ВыводитьМетаданные Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеТипа = ?(ПредставлениеТипа = "", ИмяКоллекции, ПредставлениеТипа);
		
		НоваяСтрока = Словарь.Метаданные.Добавить();
		НоваяСтрока.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		НоваяСтрока.Имя = ОбъектМетаданных.Имя;
		НоваяСтрока.Представление = ОбъектМетаданных.Представление();
		НоваяСтрока.ИмяТипа = ИмяКоллекции;
		НоваяСтрока.ПорядокТипа = ПорядокТипа;
		НоваяСтрока.ИмяТипаВрег = ВРег(ИмяКоллекции);
		НоваяСтрока.ПредставлениеТипа = ФразаИнтерфейса(ПредставлениеТипа);
		НоваяСтрока.ИмяТипаЕд = ИмяКоллекцииЕд;
		НоваяСтрока.Картинка  = КартинкаТипа;
		НоваяСтрока.СсылкаСписка = ПолучитьНавигационнуюСсылку(ОбъектМетаданных);
		НоваяСтрока.ЭтоТаблицаДанных = ЭтоТаблицаДанных;
		НоваяСтрока.ВариантыОтчетов = КоллекцияВариантовОтчетовСловаряПоискаПоМетаданным();
		
		Если ЭтоТаблицаДанных Тогда
			
			ДобавитьТабличныеМетаданныеВСловарь(КоллекцияМетаданных, ОбъектМетаданных, 
				НоваяСтрока, ЭтоСсылочныйТип, ЭтоПолныеПрава);
			
		КонецЕсли;
		
		Если ЭтоОтчеты И ПараметрыЗаполнения.ВыводитьВариантыОтчетов Тогда
			ДобавитьМетаданныеВСловарь_ВариантыОтчетов(ОбъектМетаданных, НоваяСтрока);
		КонецЕсли;
		
		НоваяСтрока.КлючевыеСлова = КлючевыеСловаПоискаОбъектаМетаданных(ОбъектМетаданных, НоваяСтрока);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьТабличныеМетаданныеВСловарь(Знач КоллекцияМетаданных, 
	Знач ОбъектМетаданных, Знач НоваяСтрока, Знач ЭтоСсылочныйТип, Знач ЭтоПолныеПрава)
	
	Если ЭтоСсылочныйТип Тогда
		НоваяСтрока.ЕстьПравоПоиска = ЭтоПолныеПрава ИЛИ ЕстьПравоВводаПоСтрокеОбъектаМетаданных(ОбъектМетаданных);
	КонецЕсли;
	
	ВозможноСоздание = ВозможноСозданиеТипаДобавляемогоВСловарь(
		ЭтоСсылочныйТип, КоллекцияМетаданных, ОбъектМетаданных);
	
	Если ВозможноСоздание Тогда
		НоваяСтрока.ЕстьПравоСоздания = ЭтоПолныеПрава ИЛИ ЕстьПравоСозданияОбъектаМетаданных(ОбъектМетаданных);
		Если НоваяСтрока.ЕстьПравоСоздания Тогда
			НоваяСтрока.СсылкаСоздания = "e1cib/data/" + ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМетаданныеВСловарь_ВариантыОтчетов(ОбъектМетаданных, НоваяСтрока)
	
	ОсновнаяСхемаКомпоновки = ОбъектМетаданных.ОсновнаяСхемаКомпоновкиДанных;
	Если ОсновнаяСхемаКомпоновки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОтчета = Отчеты[ОбъектМетаданных.Имя];
	
	Попытка
		СхемаКомпоновкиДанных = МенеджерОтчета.ПолучитьМакет(ОсновнаяСхемаКомпоновки.Имя); // СхемаКомпоновкиДанных
	Исключение
		Возврат; // Может быть, что СКД ошибочная или в БД нет предопределенных данных
	КонецПопытки;
	
	ВариантыОтчета = СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого ВариантОтчета Из ВариантыОтчета Цикл
		СтрокаВарианта = НоваяСтрока.ВариантыОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВарианта, ВариантОтчета);
	КонецЦикла;
	
КонецПроцедуры

// Возможно создание типа добавляемого в словарь.
// 
// Параметры:
//  ЭтоСсылочныйТип - Булево
//  КоллекцияМетаданных - КоллекцияОбъектовМетаданных
//  ОбъектМетаданных - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Булево
Функция ВозможноСозданиеТипаДобавляемогоВСловарь(Знач ЭтоСсылочныйТип, Знач КоллекцияМетаданных, Знач ОбъектМетаданных)
	
	Возврат ЭтоСсылочныйТип 
		ИЛИ (КоллекцияМетаданных = Метаданные.РегистрыСведений 
		И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый);
	
КонецФункции

// Есть право создания объекта метаданных
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоСозданияОбъектаМетаданных(ОбъектМетаданных)
	
	Попытка
		ЕстьПравоСоздания = ПравоДоступа("ИнтерактивноеДобавление", ОбъектМетаданных);
	Исключение
		ЕстьПравоСоздания = Ложь;
	КонецПопытки;
	
	Возврат ЕстьПравоСоздания;
	
КонецФункции

// Есть право ввода по строке объекта метаданных
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоВводаПоСтрокеОбъектаМетаданных(ОбъектМетаданных)
	
	Попытка
		ЕстьПравоВвода = ПравоДоступа("ВводПоСтроке", ОбъектМетаданных);
	Исключение
		ЕстьПравоВвода = Ложь;
	КонецПопытки;
	
	Возврат ЕстьПравоВвода;
	
КонецФункции

// Ключевые слова поиска объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
//  СтрокаСловаря - СтрокаТаблицыЗначений: см. СловарьГлобальногоПоискаМетаданных
//  ЭтоСтрокаВарианта - Булево - Это строка варианта отчетов или основная строка метаданного
// 
// Возвращаемое значение:
//  Строка
Функция КлючевыеСловаПоискаОбъектаМетаданных(ОбъектМетаданных, СтрокаСловаря, ЭтоСтрокаВарианта = Ложь)
	
	КлючевыеСлова = Новый Массив; // Массив из Строка
	
	Если ЭтоСтрокаВарианта Тогда
		
		Для Каждого ИмяСвойстваВарианта Из СтрРазделить("Имя,Представление", ",") Цикл
			ТекущееЗначение = Строка(СтрокаСловаря[ИмяСвойстваВарианта]);
			Если НЕ ВРег(ТекущееЗначение) = СтандартноеИмяОсновногоВариантаОтчета() Тогда
				ДобавитьКлючевоеСловоПоискаОбъектаМетаданных(КлючевыеСлова, ТекущееЗначение);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ДобавитьКлючевоеСловоПоискаОбъектаМетаданных(КлючевыеСлова, ОбъектМетаданных.Имя);
		ДобавитьКлючевоеСловоПоискаОбъектаМетаданных(КлючевыеСлова, ОбъектМетаданных.Представление());
		
		ДополнительныеСвойства = "ПредставлениеОбъекта,ПредставлениеСписка,ПредставлениеЗаписи,РасширенноеПредставление,
			|РасширенноеПредставлениеЗаписи,РасширенноеПредставлениеОбъекта,РасширенноеПредставлениеСписка";
		СвойстваМетаданных = Новый Структура(ДополнительныеСвойства);
		ЗаполнитьЗначенияСвойств(СвойстваМетаданных, ОбъектМетаданных);
		Для Каждого КлючИЗначение Из СвойстваМетаданных Цикл
			ДобавитьКлючевоеСловоПоискаОбъектаМетаданных(КлючевыеСлова, Строка(КлючИЗначение.Значение));
		КонецЦикла;
		
		Для Каждого ВариантОтчета Из СтрокаСловаря.ВариантыОтчетов Цикл
			ВариантОтчета.КлючевыеСлова = КлючевыеСловаПоискаОбъектаМетаданных(ОбъектМетаданных, ВариантОтчета, Истина);
			ДобавитьКлючевоеСловоПоискаОбъектаМетаданных(КлючевыеСлова, ВариантОтчета.КлючевыеСлова);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВРег(СтрСоединить(КлючевыеСлова, " "));
	
КонецФункции

// Добавить ключевое слово поиска объекта метаданных.
// 
// Параметры:
//  КлючевыеСлова - Массив из Строка
//  КлючевоеСлово - Строка
Процедура ДобавитьКлючевоеСловоПоискаОбъектаМетаданных(КлючевыеСлова, КлючевоеСлово)
	
	Если НЕ ПустаяСтрока(КлючевоеСлово) Тогда
		КлючевыеСлова.Добавить(ВРег(Строка(КлючевоеСлово)));
	КонецЕсли;
	
КонецПроцедуры

// Стандартное имя основного варианта отчета.
// 
// Возвращаемое значение:
//  Строка
Функция СтандартноеИмяОсновногоВариантаОтчета(ВРег = Истина)
	
	Результат = "Основной";
	Если ВРег Тогда
		Результат = ВРег(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ключ истории выполнения команды.
// 
// Параметры:
//  ПолныйКлючКоманды - Строка
// 
// Возвращаемое значение:
//  Строка
Функция КлючИсторииВыполненияКоманды(ПолныйКлючКоманды)
	
	Возврат СтрШаблон("РГП_История_%1", ПолныйКлючКоманды);
	
КонецФункции

// Представление элемента истории вычисления выражения.
// 
// Параметры:
//  ЗначениеИстории - см. РГП_ГлобальныйПоискКлиентСервер.ЭлементИсторииВычисленияВыражения
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ПредставлениеЭлементаИсторииВычисленияВыражения(ЗначениеИстории)
	
	МаксДлинаПредставления = 100;
	
	ЧастиПредставления = Новый Массив; // Массив из Строка
	
	ШрифтДопИнформации = РГП_ГлобальныйПоискКлиентСервер.ШрифтДопИнформации();
	
	Контекст = "&" + ФразаИнтерфейса(?(ЗначениеИстории.НаСервере, "НаСервере", "НаКлиенте"));
	ЧастиПредставления.Добавить(
		Новый ФорматированнаяСтрока(Контекст, ШрифтДопИнформации, WebЦвета.КожаноКоричневый));
	ЧастиПредставления.Добавить(Символы.ПС);
	
	Выражение = ЗначениеИстории.Выражение;
	ПредставлениеРезультата = ЗащититьСтрокуДляПередачиНаКлиент(Выражение);
	РГП_ГлобальныйПоискКлиентСервер.ОбрезатьСтроку(Выражение, МаксДлинаПредставления);
	ЧастиПредставления.Добавить(Новый ФорматированнаяСтрока(Выражение));
	ЧастиПредставления.Добавить(Символы.ПС);
	
	Если ЗначениеИстории.Успешно Тогда
		ПредставлениеРезультата = СтрШаблон(
			"[%1]: %2", ЗначениеИстории.ПредставлениеТипа, Строка(ЗначениеИстории.Результат));
		ЦветПредставления = РГП_ГлобальныйПоискКлиентСервер.ЦветЗаголовковМеню();
	Иначе
		ПредставлениеРезультата = ЗначениеИстории.ОписаниеОшибки;
		ЦветПредставления = РГП_ГлобальныйПоискКлиентСервер.ЦветОсобогоТекста();
	КонецЕсли;
	ПредставлениеРезультата = ЗащититьСтрокуДляПередачиНаКлиент(ПредставлениеРезультата);
	РГП_ГлобальныйПоискКлиентСервер.ОбрезатьСтроку(ПредставлениеРезультата, МаксДлинаПредставления);
	ЧастиПредставления.Добавить(
		Новый ФорматированнаяСтрока(ПредставлениеРезультата, ШрифтДопИнформации, ЦветПредставления));
	
	ЧастиПредставления.Добавить(Символы.ПС);
	ЧастиПредставления.Добавить(
		Новый ФорматированнаяСтрока(Строка(ЗначениеИстории.Дата), ШрифтДопИнформации));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиПредставления);
	
КонецФункции

// Защитить строку для передачи на клиент
// Удаляет символы, которые приводят к багу платформы
// Если хотя бы в одном элементе результата поиска будет плохой символ, то не будут выведены все элементы
// 
// Параметры:
//  Строка - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ЗащититьСтрокуДляПередачиНаКлиент(Строка)
	
	Возврат СтрЗаменить(Строка, Символы.ВТаб, "");
	
КонецФункции

// Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
//
// Параметры:
//  Данные   - Строка - любое сериализуемое значение.
//  Алгоритм - ХешФункция   - алгоритм расчета контрольной суммы. По умолчанию, MD5.
// 
// Возвращаемое значение:
//  Строка - контрольная сумма строкой без пробелов (например 32 символа).
//
Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	ХешированиеДанных.Добавить(Данные);
	
	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда 
		Результат = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИмяТекущегоПользователяИБ()
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
		Возврат ПользовательИБ.Имя;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// см. РГП_ГлобальныйПоискКлиентСервер.ФразаИнтерфейса
Функция ФразаИнтерфейса(Фраза)
	
	Возврат РГП_ГлобальныйПоискКлиентСервер.ФразаИнтерфейса(Фраза);
	
КонецФункции

// Возвращаемое значение:
//  Массив из см. ОписаниеВозможногоМодуляПользователи
Функция ВозможныеМодулиПользователи()
	
	Русскоязычный = ОписаниеВозможногоМодуляПользователи("Пользователи", 
		"ЭтоПолноправныйПользователь", "РолиДоступны");
	Международный = ОписаниеВозможногоМодуляПользователи("Users", 
		"IsFullUser", "RolesAvailable");
	
	ВозможныеМодули = Новый Массив; // Массив из см. ОписаниеВозможногоМодуляПользователи
	ВозможныеМодули.Добавить(Русскоязычный);
	ВозможныеМодули.Добавить(Международный);
	
	Возврат ВозможныеМодули;
	
КонецФункции

// Параметры:
//  ИмяМодуля - Строка
//  МетодЭтоПолноправныйПользователь - Строка
//  МетодРолиДоступны - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ИмяМодуля - Строка
// * Методы - Структура:
// ** ЭтоПолноправныйПользователь - Строка
// ** РолиДоступны - Строка
Функция ОписаниеВозможногоМодуляПользователи(ИмяМодуля, 
	МетодЭтоПолноправныйПользователь, МетодРолиДоступны)
	
	Методы = Новый Структура;
	Методы.Вставить("ЭтоПолноправныйПользователь", МетодЭтоПолноправныйПользователь);
	Методы.Вставить("РолиДоступны", МетодРолиДоступны);
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяМодуля", ИмяМодуля);
	Результат.Вставить("Методы", Методы);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеМодуляПользователи()
	
	ВозможныеМодули = ВозможныеМодулиПользователи();
	Для Каждого ОписаниеМодуля Из ВозможныеМодули Цикл
		Если Метаданные.ОбщиеМодули.Найти(ОписаниеМодуля.ИмяМодуля) <> Неопределено Тогда
			Возврат ОписаниеМодуля;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Область Избранное

// Возвращаемое значение:
//  ИзбранноеРаботыПользователя
Функция ИзбранноеРаботыПользователя()
	
	Хранилище = ХранилищеИзбранного();
	ПараметрыОтбора = ПараметрыОтбораХранилищаИзбранного();
	Выборка = Хранилище.Выбрать(ПараметрыОтбора);
	Если Выборка.Следующий() Тогда
		Избранное = Выборка.Настройки; // ИзбранноеРаботыПользователя
	КонецЕсли;
	
	Если ТипЗнч(Избранное) <> Тип("ИзбранноеРаботыПользователя") Тогда
		Избранное = Новый ИзбранноеРаботыПользователя();
	КонецЕсли;
	
	Возврат Избранное;
	
КонецФункции

// Параметры:
//  ИзбранноеРаботы - ИзбранноеРаботыПользователя
Процедура СохранитьИзбранноеРаботыПользователя(ИзбранноеРаботы)
	
	Хранилище = ХранилищеИзбранного();
	ПараметрыОтбора = ПараметрыОтбораХранилищаИзбранного();
	
	Хранилище.Сохранить(ПараметрыОтбора.КлючОбъекта, ПараметрыОтбора.КлючНастроек, 
		ИзбранноеРаботы, , ПараметрыОтбора.Пользователь);
	
КонецПроцедуры

// Заполнить избранное работы пользователя.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьИзбранноеВПараметрахГлобальногоПоиска(Параметры)
	
	Если НЕ Параметры.ДоступноИзбранное Тогда
		Возврат;
	КонецЕсли;
	
	Избранное = ИзбранноеРаботыПользователя();
	
	Для Каждого Элемент Из Избранное Цикл
		
		СтрокаПоиска = РГП_ГлобальныйПоискКлиентСервер.СтрокаПоискаИзНавигационнойСсылки(Элемент.НавигационнаяСсылка);
	
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			ЭлементИзбранного = РГП_ГлобальныйПоискКлиентСервер.ЭлементИзбранного(СтрокаПоиска);
			ЗаполнитьЗначенияСвойств(ЭлементИзбранного, Элемент);
			Параметры.ИзбранноеПоиск.Вставить(ЭлементИзбранного.КлючПоиска, ЭлементИзбранного);
			Параметры.ИзбранноеПорядок.Добавить(ЭлементИзбранного);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ХранилищеИзбранного()
	
	Возврат ХранилищеСистемныхНастроек;
	
КонецФункции

Функция ПараметрыОтбораХранилищаИзбранного()
	
	Результат = Новый Структура;
	Результат.Вставить("КлючОбъекта", ФразаИнтерфейса("Общее/ИзбранноеРаботыПользователя"));
	Результат.Вставить("Пользователь", ИмяТекущегоПользователяИБ());
	Результат.Вставить("КлючНастроек", "");
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Данные - см. РГП_ГлобальныйПоискКлиентСервер.ЭлементИзбранного
// 
// Возвращаемое значение:
//  ЭлементИзбранногоРаботыПользователя
Функция ЭлементИзбранногоРаботыПользователя(Данные)
	
	Результат = Новый ЭлементИзбранногоРаботыПользователя();
	ЗаполнитьЗначенияСвойств(Результат, Данные);
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИзбранноеРаботы - см. ИзбранноеРаботыПользователя
//  НавигационнаяСсылка - Строка
//  ИндексИзбранного - Число, Неопределено - 
// 
Процедура ИзменитьИзбранное_Удалить(Знач ИзбранноеРаботы, Знач НавигационнаяСсылка, ИндексИзбранного)
	
	УдаляемыеЭлементы = Новый Массив; // Массив из ЭлементИзбранногоРаботыПользователя
	Для Каждого Элемент Из ИзбранноеРаботы Цикл
		Если ВРег(Элемент.НавигационнаяСсылка) = ВРег(НавигационнаяСсылка) Тогда
			Если ИндексИзбранного = Неопределено Тогда
				//@skip-check statement-type-change - Баг ЕДТ
				ИндексИзбранного = ИзбранноеРаботы.Индекс(Элемент);
			КонецЕсли;
			УдаляемыеЭлементы.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ИндексИзбранного = ИзбранноеРаботы.Индекс(УдаляемыйЭлемент); // Число
		ИзбранноеРаботы.Удалить(ИндексИзбранного);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИзбранноеРаботы - см. ИзбранноеРаботыПользователя
//  НовыеДанные - см. ИзменитьИзбранное.НовыеДанные
//  ИндексИзбранного - Число, Неопределено -
// 
Процедура ИзменитьИзбранное_Добавить(Знач ИзбранноеРаботы, Знач НовыеДанные, Знач ИндексИзбранного)
	
	ЭлементИзбранного = ЭлементИзбранногоРаботыПользователя(НовыеДанные);
	Если ЗначениеЗаполнено(ИндексИзбранного) Тогда
		ИзбранноеРаботы.Вставить(ИндексИзбранного, ЭлементИзбранного); // баг 1С, Вставить(0, Эл) не работает
	Иначе
		ИзбранноеРаботы.Добавить(ЭлементИзбранного);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
