// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Заполнение серверных данных перед заполнением параметров расширенного глобального поиска.
// 
// Параметры:
//  Параметры - см. РГП_ГлобальныйПоискКлиент.ПараметрыРасширенногоГлобальногоПоиска
Процедура ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска(Параметры) Экспорт
	
	ЗаполнитьОписаниеРасширенияВПараметрахГлобальногоПоиска(Параметры);
	
	ЗаполнитьКэшированныеДанныеВПараметрахГлобальногоПоиска(Параметры);
	
	РГП_ГлобальныйПоискСерверПереопределяемый.Модуль().ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска(Параметры);
	
КонецПроцедуры

// Глобальный поиск метаданные.
// 
// Параметры:
//  ИзначальнаяСтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
Процедура ГлобальныйПоискМетаданные(ИзначальнаяСтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт
	
	ОбщиеПараметры = ПараметрыВыполненияГлобальногоПоискаМетаданных(ИзначальнаяСтрокаПоиска, ПараметрыВыполнения);
	
	РГП_ГлобальныйПоискСерверПереопределяемый.Модуль().
		ПередВыполнениемГлобальногоПоискаМетаданных(ОбщиеПараметры, ИзначальнаяСтрокаПоиска);
	
	ГлобальныйПоискМетаданные_НайтиПодходящиеМетаданные(ОбщиеПараметры);
	
	ГлобальныйПоискМетаданные_ЗаполнитьРезультатыПоиска(ОбщиеПараметры, РезультатыПоиска);

КонецПроцедуры

// Метод плана глобального для вычисления выражения
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка, по которой выполняется поиск.
//  РезультатыПоиска - РезультатГлобальногоПоиска - Выходной параметр. Содержит результаты поиска.
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
Процедура ГлобальныйПоискИсторияВычисленияВыражений(Знач СтрокаПоиска, РезультатыПоиска, ПараметрыВыполнения) Экспорт

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	СортировочныйСписок = Новый СписокЗначений();
	ДанныеИстории = Новый Соответствие;

	КлючОбъекта = КлючИсторииВыполненияКоманды(ПараметрыВыполнения.ПолныйКлюч);
	ВыборкаИстории = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));
	Пока ВыборкаИстории.Следующий() Цикл
		
		ЗначениеИстории = РГП_ГлобальныйПоискКлиентСервер.ЭлементИсторииВычисленияВыражения();
		ЗаполнитьЗначенияСвойств(ЗначениеИстории, ВыборкаИстории.Настройки);
		
		ВыполняемоеДействие = РГП_ГлобальныйПоискКлиентСервер.ВыполняемоеДействиеВычисленияВыражения(
			ПараметрыВыполнения.ПолныйКлюч, ЗначениеИстории.НаСервере, ЗначениеИстории.Выражение);
		
		Представление = ПредставлениеЭлементаИсторииВычисленияВыражения(ЗначениеИстории);
		
		ЭлементРезультат = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(ВыполняемоеДействие, Представление);
		ЭлементРезультат.Картинка = БиблиотекаКартинок.История;
		ДанныеИстории.Вставить(ВыборкаИстории.КлючНастроек, ЭлементРезультат);
		
		ЭлементСортировки = СортировочныйСписок.Добавить();
		ЭлементСортировки.Значение = ЗначениеИстории.Дата;
		ЭлементСортировки.Представление = ВыборкаИстории.КлючНастроек;
		
	КонецЦикла;
	
	СортировочныйСписок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	ОсталосьРезультатов = ПараметрыВыполнения.ЛимитСтрокРезультата;
	Для Каждого ЭлементСписка Из СортировочныйСписок Цикл
		
		КлючНастройки = ЭлементСписка.Представление;
		Если ОсталосьРезультатов = 0 Тогда
			ХранилищеСистемныхНастроек.Удалить(КлючОбъекта, КлючНастройки, ТекущийПользовательИБ);
		Иначе
			РезультатыПоиска.Добавить(ДанныеИстории.Получить(КлючНастройки));
			ОсталосьРезультатов = ОсталосьРезультатов - 1;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Добавить запись истории выполнения команды.
// 
// Параметры:
//  ПолныйКлючКоманды - Строка
//  КлючЗаписи - Строка
//  ДанныеИстории - Произвольный
//  ХэшироватьКлючЗаписи - Булево - Нужно ли ключ записи хэшировать
Процедура ДобавитьЗаписьИсторииВыполненияКоманды(ПолныйКлючКоманды, Знач КлючЗаписи, ДанныеИстории, ХэшироватьКлючЗаписи = Ложь) Экспорт
	
	КлючОбъекта = КлючИсторииВыполненияКоманды(ПолныйКлючКоманды);
	
	Если ХэшироватьКлючЗаписи Тогда
		КлючЗаписи = КонтрольнаяСуммаСтрокой(КлючЗаписи);
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючЗаписи, ДанныеИстории);
	
КонецПроцедуры

// Параметры выполнения глобального поиска метаданных.
// 
// Параметры:
//  ИзначальнаяСтрокаПоиска - Строка - Изначальная строка поиска
//  ПараметрыВыполнения - см. РГП_ГлобальныйПоискКлиентСервер.ШаблонПараметровВыполненияКомандыПоиска
// 
// Возвращаемое значение:
//  Структура - Параметры выполнения глобального поиска метаданных:
// * ПараметрыВыполнения - см. ПараметрыВыполненияГлобальногоПоискаМетаданных.ПараметрыВыполнения
// * СловарьПоиска - см. ШаблонСловаряГлобальногоПоискаМетаданных
// * ПодходящиеМетаданные - ТаблицаЗначений - коллекция подходящих под строку поиска метаданных:
// ** СтрокаСловаря - СтрокаТаблицыЗначений: см. КоллекцияМетаданныхСловаряГлобальногоПоиска
// ** Приоритет - Число - Приоритет вывода. Пользователь первыми будет видеть строки с максимальным значением
Функция ПараметрыВыполненияГлобальногоПоискаМетаданных(ИзначальнаяСтрокаПоиска, ПараметрыВыполнения) Экспорт
	
	ПодходящиеМетаданные = Новый ТаблицаЗначений;
	ПодходящиеМетаданные.Колонки.Добавить("СтрокаСловаря", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	ПодходящиеМетаданные.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Результат = Новый Структура();
	Результат.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	Результат.Вставить("СловарьПоиска", СловарьГлобальногоПоискаМетаданных());
	Результат.Вставить("ПодходящиеМетаданные", ПодходящиеМетаданные);
	
	Возврат Результат;
	
КонецФункции

// Словарь глобального поиска метаданных.
// 
// Параметры:
//  ИзКэша - Булево - Выбирать ли закэшированную структуру
//  	Не рекомендуется Передавать значение Ложь, так как все внутренние механизмы используют закэшированное значение
// 
// Возвращаемое значение:
//  см. ШаблонСловаряГлобальногоПоискаМетаданных
Функция СловарьГлобальногоПоискаМетаданных(ИзКэша = Истина) Экспорт
	
	Если ИзКэша Тогда
		Возврат РГП_ГлобальныйПоискСерверПовтИсп.СловарьГлобальногоПоискаМетаданных();
	КонецЕсли;
	
	Словарь = ШаблонСловаряГлобальногоПоискаМетаданных();
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.БизнесПроцессы, "БизнесПроцессы", "БизнесПроцесс", "БП");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.Документы, "Документы", "Документ", "Док");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.ЖурналыДокументов, "ЖурналыДокументов", "ЖурналДокументов", "Журнал,ЖД,Документ");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.Задачи, "Задачи", "Задача");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.Обработки, "Обработки", "Обработка", "Обр");
		
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.Отчеты, "Отчеты", "Отчет", "Отч");
		
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.ПланыВидовРасчета, "ПланыВидовРасчета", "ПланВидовРасчета", "ПВР,ПланВидаРасчета,ПланРасчета");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.ПланыВидовХарактеристик, 
		"ПланыВидовХарактеристик", "ПланВидовХарактеристик", "ПВХ,ПланВидаХарактеристик");
		
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.ПланыОбмена, "ПланыОбмена", "ПланОбмена", "ПО,Обмен");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.ПланыСчетов, "ПланыСчетов", "ПланСчетов", "ПС,Счет,Счета");
		
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.РегистрыБухгалтерии, "РегистрыБухгалтерии", "РегистрБухгалтерии", "РБ,Бухгалтерия,БУ");
	
    ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.РегистрыНакопления, "РегистрыНакопления", "РегистрНакопления", "РН");
	
    ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.РегистрыРасчета, "РегистрыРасчета", "РегистрРасчета", "РР");
		
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.РегистрыСведений, "РегистрыСведений", "РегистрСведений", "РС");
	
	ДобавитьМетаданныеВСловарь(Словарь, 
		Метаданные.Справочники, "Справочники", "Справочник", "Спр");
	
	Словарь.Метаданные.Сортировать("Имя");
	
	Возврат Словарь;
		
КонецФункции

// Модуль пользователей.
// 
// Возвращаемое значение:
//  CommonModule.РГП_ГлобальныйПоискСервер
Функция МодульПользователей() Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("Пользователи") = Неопределено Тогда
		
		Возврат РГП_ГлобальныйПоискСервер;
		
	Иначе
		
		УстановитьБезопасныйРежим(Истина);
		Возврат Вычислить("Пользователи");
		
	КонецЕсли;
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей
//
// Параметры:
//  ИменаРолей - см. РГП_ГлобальныйПоискКлиентСервер.МассивИменРолейИзПараметра.ИменаРолей
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна
//
Функция РолиДоступны(ИменаРолей) Экспорт
	
	МассивРолей = РГП_ГлобальныйПоискКлиентСервер.МассивИменРолейИзПараметра(ИменаРолей);
	Для Каждого ИмяРоли Из МассивРолей Цикл
		
		//@skip-check using-isinrole - Смысл функции - проверять роль
		Если РольДоступна(ИмяРоли) Тогда
			Возврат Истина;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Это полноправный пользователь.
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоПолноправныйПользователь() Экспорт
	
	Возврат ПравоДоступа("Администрирование", Метаданные) 
		И ПравоДоступа("АдминистрированиеДанных", Метаданные) 
		И ПравоДоступа("АдминистрированиеРасширенийКонфигурации", Метаданные);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнить описание расширения в параметрах глобального поиска.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьОписаниеРасширенияВПараметрахГлобальногоПоиска(Параметры)

	РасширениеКонфигурации = Метаданные.ОбщиеМодули.РГП_ГлобальныйПоискСервер.РасширениеКонфигурации();
	МетаданныеРасширения   = Новый ОписаниеКонфигурации(РасширениеКонфигурации.ПолучитьДанные());
	
	ОписаниеРасширения     = Параметры.ОписаниеРасширения;
	ОписаниеРасширения.Версия = РасширениеКонфигурации.Версия;
	ОписаниеРасширения.Репозиторий = МетаданныеРасширения.Поставщик;
	
КонецПроцедуры

// Заполнить кэшированные данные в параметрах глобального поиска.
// 
// Параметры:
//  Параметры - см. ПередЗаполнениемПараметровРасширенногоГлобальногоПоиска.Параметры
Процедура ЗаполнитьКэшированныеДанныеВПараметрахГлобальногоПоиска(Параметры)

	МодульПользователей = РГП_ГлобальныйПоискСерверПереопределяемый.МодульПользователей();
	
	Параметры.КэшированныеДанные.ЭтоПолноправныйПользователь = МодульПользователей.ЭтоПолноправныйПользователь();
	
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "Администрирование");
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "АдминистрированиеДанных");
	РГП_ГлобальныйПоискКлиентСервер.ДополнитьКэшПравПользователей(Параметры, "АдминистрированиеРасширенийКонфигурации");
	
КонецПроцедуры

// Глобальный поиск метаданные найти подходящие метаданные.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
Процедура ГлобальныйПоискМетаданные_НайтиПодходящиеМетаданные(ОбщиеПараметры)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	
	КлючТипа = ОбщиеПараметры.СловарьПоиска.КлючиТипов.Получить(ВРег(ПараметрыВыполнения.Ключ));
	ПустаяСтрокаПоиска = ПустаяСтрока(ПараметрыВыполнения.СтрокаПоиска);
	
	Если КлючТипа = Неопределено Тогда
		Если ПустаяСтрокаПоиска Тогда
			Возврат;
		КонецЕсли;
		ДанныеСловаря = ОбщиеПараметры.СловарьПоиска.Метаданные;
	Иначе
		//@skip-check statement-type-change
		ДанныеСловаря = ОбщиеПараметры.СловарьПоиска.Метаданные.НайтиСтроки(Новый Структура("ИмяТипа", КлючТипа));
	КонецЕсли;
	
	ПодходящиеМетаданные = ОбщиеПараметры.ПодходящиеМетаданные;
	
	Для Каждого СтрокаСловаря Из ДанныеСловаря Цикл //СтрокаТаблицыЗначений: см. КоллекцияМетаданныхСловаряГлобальногоПоиска
		
		Если ПустаяСтрокаПоиска Тогда
			Если ПодходящиеМетаданные.Количество() >= ПараметрыВыполнения.ЛимитСтрокРезультата Тогда
				Возврат;
			Иначе
				ПодходящиеМетаданные.Добавить().СтрокаСловаря = СтрокаСловаря;
			КонецЕсли;
		Иначе
			ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря(ОбщиеПараметры, СтрокаСловаря);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрокаПоиска Тогда
		ПодходящиеМетаданные.Сортировать("Приоритет УБЫВ");
	КонецЕсли;
	
КонецПроцедуры

// Глобальный поиск метаданные обработать строку словаря.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
//  СтрокаСловаря - СтрокаТаблицыЗначений: см. КоллекцияМетаданныхСловаряГлобальногоПоиска
Процедура ГлобальныйПоискМетаданные_ОбработатьСтрокуСловаря(ОбщиеПараметры, СтрокаСловаря)
	
	ПараметрыВыполнения = ОбщиеПараметры.ПараметрыВыполнения;
	МаксимальныйПриоритет = ПараметрыВыполнения.МаксимальныйПриоритет;
	
	Приоритет = 0;

	ПроверяемыеСвойстваМетаданных    = Новый Массив(3); //Массив из Строка
	ПроверяемыеСвойстваМетаданных[0] = ВРег(СтрокаСловаря.Имя);
	ПроверяемыеСвойстваМетаданных[1] = ВРег(СтрокаСловаря.Представление);
	ПроверяемыеСвойстваМетаданных[2] = ВРег(СтрокаСловаря.ПолноеИмя);

	Для ИндексСвойства = 0 По ПроверяемыеСвойстваМетаданных.Количество() - 1 Цикл

		ЗначениеСвойства = ПроверяемыеСвойстваМетаданных[ИндексСвойства];
		Если ЗначениеСвойства = ПараметрыВыполнения.СтрокаПоискаВрег Тогда
			Приоритет = МаксимальныйПриоритет;
		Иначе
			НайденнаяКоордината = СтрНайти(ЗначениеСвойства, ПараметрыВыполнения.СтрокаПоискаВрег);
			Если НайденнаяКоордината = 0 Тогда
				Продолжить;
			ИначеЕсли НайденнаяКоордината = 1 Тогда
				Приоритет = МаксимальныйПриоритет - 1;
			Иначе
				Приоритет = МаксимальныйПриоритет - 2;
			КонецЕсли;
		КонецЕсли;

		Прервать;

	КонецЦикла;

	Если Приоритет = 0 Тогда
		Для Каждого СловоПоиска Из ПараметрыВыполнения.СловаПоиска Цикл
			Если СтрНайти(СтрокаСловаря.КлючевыеСлова, СловоПоиска) > 0 Тогда
				Приоритет = Приоритет + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Приоритет > 0 Тогда
		СтрокаМетаданных = ОбщиеПараметры.ПодходящиеМетаданные.Добавить();
		СтрокаМетаданных.СтрокаСловаря = СтрокаСловаря;
		СтрокаМетаданных.Приоритет = Приоритет;
	КонецЕсли;	
	
КонецПроцедуры

// Глобальный поиск метаданные найти подходящие метаданные.
// 
// Параметры:
//  ОбщиеПараметры - см. ПараметрыВыполненияГлобальногоПоискаМетаданных
//  РезультатыПоиска - см. ГлобальныйПоискМетаданные.РезультатыПоиска
Процедура ГлобальныйПоискМетаданные_ЗаполнитьРезультатыПоиска(ОбщиеПараметры, РезультатыПоиска)
	
	ДоступноРезультатов  = ОбщиеПараметры.ПараметрыВыполнения.ЛимитСтрокРезультата;
	ПодходящиеМетаданные = ОбщиеПараметры.ПодходящиеМетаданные;
	
	Для Каждого СтрокаМетаданных Из ПодходящиеМетаданные Цикл
		
		СтрокаСловаря = СтрокаМетаданных.СтрокаСловаря; //СтрокаТаблицыЗначений: см. КоллекцияМетаданныхСловаряГлобальногоПоиска
		
		ЭлементРезультата = РГП_ГлобальныйПоискКлиентСервер.ЭлементРезультатаГлобальногоПоиска(
			СтрокаСловаря.СсылкаСписка, СтрокаСловаря.ПолноеИмя, СтрокаСловаря.Картинка);
		
		Если СтрокаСловаря.ЕстьПравоСоздания Тогда
			ЭлементРезультата.Действия.Добавить(СтрокаСловаря.СсылкаСписка, "Открыть");
			ЭлементРезультата.Действия.Добавить(СтрокаСловаря.СсылкаСоздания, "Создать");
		КонецЕсли;
		
		РезультатыПоиска.Добавить(ЭлементРезультата);
		
		ДоступноРезультатов = ДоступноРезультатов - 1;
		Если ДоступноРезультатов = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Шаблон словаря поиска метаданных.
// 
// Возвращаемое значение:
//  Структура - Шаблон словаря поиска метаданных:
// * КлючиТипов - Соответствие из КлючИЗначение:
// ** Ключ - Строка
// ** Значение - Строка
// * Метаданные - см. КоллекцияМетаданныхСловаряГлобальногоПоиска
Функция ШаблонСловаряГлобальногоПоискаМетаданных()
	
	Словарь = Новый Структура;
	Словарь.Вставить("КлючиТипов", Новый Соответствие);
	Словарь.Вставить("Метаданные", КоллекцияМетаданныхСловаряГлобальногоПоиска());
	
	Возврат Словарь;
		
КонецФункции

// Коллекция метаданных словаря глобального поиска.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Коллекция метаданных словаря глобального поиска:
// * Имя - Строка
// * Представление - Строка
// * ПолноеИмя - Строка
// * ИмяТипа - Строка
// * ИмяТипаЕд - Строка
// * КлючевыеСлова - Строка
// * Картинка - Картинка
// * СсылкаСписка - Строка
// * СсылкаСоздания - Строка
// * ЕстьПравоСоздания - Булево
Функция КоллекцияМетаданныхСловаряГлобальногоПоиска()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Имя"              , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление"    , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолноеИмя"        , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяТипа"          , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяТипаЕд"        , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КлючевыеСлова"    , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Картинка"         , Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("СсылкаСписка"     , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СсылкаСоздания"   , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЕстьПравоСоздания", Новый ОписаниеТипов("Булево"));
	Результат.Индексы.Добавить("ИмяТипа");
	
	Возврат Результат;
	
КонецФункции

// Добавить метаданные в словарь.
// 
// Параметры:
//  Словарь - см. СловарьГлобальногоПоискаМетаданных
//  КоллекцияМетаданных - КоллекцияОбъектовМетаданных
//  ИмяКоллекции - Строка
//  ИмяКоллекцииЕд - Строка
//  СокращенияТипа - Строка
Процедура ДобавитьМетаданныеВСловарь(Знач Словарь, Знач КоллекцияМетаданных, Знач ИмяКоллекции, Знач ИмяКоллекцииЕд, Знач СокращенияТипа = "")
	
	ИмяКоллекции   = ВРег(ИмяКоллекции);
	ИмяКоллекцииЕд = ВРег(ИмяКоллекцииЕд);
	СокращенияТипа = ВРег(СокращенияТипа);
	КартинкаТипа   = БиблиотекаКартинок[ИмяКоллекцииЕд]; //Картинка
		
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		
		Если НЕ ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Словарь.Метаданные.Добавить();
		НоваяСтрока.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		НоваяСтрока.Имя = ОбъектМетаданных.Имя;
		НоваяСтрока.Представление = ОбъектМетаданных.Представление();
		НоваяСтрока.ИмяТипа = ИмяКоллекции;
		НоваяСтрока.ИмяТипаЕд = ИмяКоллекцииЕд;
		НоваяСтрока.Картинка  = КартинкаТипа;
		НоваяСтрока.СсылкаСписка = ПолучитьНавигационнуюСсылку(ОбъектМетаданных);
		
		Попытка
			НоваяСтрока.ЕстьПравоСоздания = ПравоДоступа("ИнтерактивноеДобавление", ОбъектМетаданных);
		Исключение
			Попытка
				НоваяСтрока.ЕстьПравоСоздания = ПравоДоступа("Редактирование", ОбъектМетаданных);
			Исключение
				НоваяСтрока.ЕстьПравоСоздания = Ложь;
			КонецПопытки;
		КонецПопытки;
		
		Если НоваяСтрока.ЕстьПравоСоздания Тогда
			НоваяСтрока.СсылкаСоздания = "e1cib/data/" + ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		
		КлючевыеСлова = Новый Массив; //Массив из Строка
		КлючевыеСлова.Добавить(ВРег(ОбъектМетаданных.Имя));
		КлючевыеСлова.Добавить(ВРег(ОбъектМетаданных.Представление()));
		
		НоваяСтрока.КлючевыеСлова = ВРег(СтрСоединить(КлючевыеСлова, " "));
		
	КонецЦикла;
	
	Словарь.КлючиТипов.Вставить(ИмяКоллекции, ИмяКоллекции);
	Словарь.КлючиТипов.Вставить(ИмяКоллекцииЕд, ИмяКоллекции);
	Для Каждого Сокращение Из СтрРазделить(СокращенияТипа, ",", Ложь) Цикл
		Словарь.КлючиТипов.Вставить(Сокращение, ИмяКоллекции);			
	КонецЦикла;
		
КонецПроцедуры

// Ключ истории выполнения команды.
// 
// Параметры:
//  ПолныйКлючКоманды - Строка
// 
// Возвращаемое значение:
//  Строка
Функция КлючИсторииВыполненияКоманды(ПолныйКлючКоманды)
	
	Возврат СтрШаблон("РГП_История_%1", ПолныйКлючКоманды);
	
КонецФункции

// Представление элемента истории вычисления выражения.
// 
// Параметры:
//  ЗначениеИстории - см. РГП_ГлобальныйПоискКлиентСервер.ЭлементИсторииВычисленияВыражения
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ПредставлениеЭлементаИсторииВычисленияВыражения(ЗначениеИстории)
	
	МаксДлинаПредставления = 100;
	
	ЧастиПредставления = Новый Массив; //Массив из Строка
		
	Контекст = ?(ЗначениеИстории.НаСервере, "&НаСервере", "&НаКлиенте");
	ЧастиПредставления.Добавить(
		Новый ФорматированнаяСтрока(Контекст, ШрифтыСтиля.МелкийШрифтТекста, WebЦвета.КожаноКоричневый));
	ЧастиПредставления.Добавить(Символы.ПС);
	
	Выражение = ЗначениеИстории.Выражение;
	ПредставлениеРезультата = ЗащититьСтрокуДляПередачиНаКлиент(Выражение);
	Если СтрДлина(Выражение) > МаксДлинаПредставления Тогда
		Выражение = Лев(Выражение, МаксДлинаПредставления-3) + "...";
	КонецЕсли;
	ЧастиПредставления.Добавить(Новый ФорматированнаяСтрока(Выражение));
	ЧастиПредставления.Добавить(Символы.ПС);
	
	Если ЗначениеИстории.Успешно Тогда
		ПредставлениеРезультата = СтрШаблон(
			"[%1]: %2", ЗначениеИстории.ПредставлениеТипа, Строка(ЗначениеИстории.Результат));
		ЦветПредставления = WebЦвета.ТемноЗеленый;
	Иначе
		ПредставлениеРезультата = ЗначениеИстории.ОписаниеОшибки;
		ЦветПредставления = WebЦвета.Красный;
	КонецЕсли;
	ПредставлениеРезультата = ЗащититьСтрокуДляПередачиНаКлиент(ПредставлениеРезультата);
	Если СтрДлина(ПредставлениеРезультата) > МаксДлинаПредставления Тогда
		ПредставлениеРезультата = Лев(ПредставлениеРезультата, МаксДлинаПредставления-3) + "...";
	КонецЕсли;
	ЧастиПредставления.Добавить(
		Новый ФорматированнаяСтрока(ПредставлениеРезультата, ШрифтыСтиля.МелкийШрифтТекста, ЦветПредставления));
	
	ЧастиПредставления.Добавить(Символы.ПС);
	ЧастиПредставления.Добавить(
		Новый ФорматированнаяСтрока(Строка(ЗначениеИстории.Дата), ШрифтыСтиля.МелкийШрифтТекста, WebЦвета.СветлоСерый));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиПредставления);
	
КонецФункции

// Защитить строку для передачи на клиент
// Удаляет символы, которые приводят к багу платформы
// Если хотя бы в одном элементе результата поиска будет плохой символ, то не будут выведены все элементы
// 
// Параметры:
//  Строка - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ЗащититьСтрокуДляПередачиНаКлиент(Строка)
	
	Возврат СтрЗаменить(Строка, Символы.ВТаб, "");
	
КонецФункции

// Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
//
// Параметры:
//  Данные   - Строка - любое сериализуемое значение.
//  Алгоритм - ХешФункция   - алгоритм расчета контрольной суммы. По умолчанию, MD5.
// 
// Возвращаемое значение:
//  Строка - контрольная сумма строкой без пробелов (например 32 символа).
//
Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	ХешированиеДанных.Добавить(Данные);
	
	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда 
		Результат = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
